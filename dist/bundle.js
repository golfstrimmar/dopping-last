/*! For license information please see bundle.js.LICENSE.txt */
!(function () {
  var e = {
      "./node_modules/plyr/dist/plyr.min.js": function (e, t, n) {
        var i = ["premium", "referrerPolicy"];
        function a(e) {
          return (
            (function (e) {
              if (Array.isArray(e)) return p(e);
            })(e) ||
            (function (e) {
              if (
                ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
                null != e["@@iterator"]
              )
                return Array.from(e);
            })(e) ||
            h(e) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function r(e, t) {
          if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function");
        }
        function s(e, t) {
          for (var n = 0; n < t.length; n++) {
            var i = t[n];
            (i.enumerable = i.enumerable || !1),
              (i.configurable = !0),
              "value" in i && (i.writable = !0),
              Object.defineProperty(e, i.key, i);
          }
        }
        function o(e, t, n) {
          return (
            t && s(e.prototype, t),
            n && s(e, n),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            e
          );
        }
        function l(e, t) {
          var n = Object.keys(e);
          if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(e);
            t &&
              (i = i.filter(function (t) {
                return Object.getOwnPropertyDescriptor(e, t).enumerable;
              })),
              n.push.apply(n, i);
          }
          return n;
        }
        function c(e) {
          for (var t = 1; t < arguments.length; t++) {
            var n = null != arguments[t] ? arguments[t] : {};
            t % 2
              ? l(Object(n), !0).forEach(function (t) {
                  u(e, t, n[t]);
                })
              : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
              : l(Object(n)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(n, t)
                  );
                });
          }
          return e;
        }
        function u(e, t, n) {
          return (
            t in e
              ? Object.defineProperty(e, t, {
                  value: n,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[t] = n),
            e
          );
        }
        function d(e, t) {
          return (
            (function (e) {
              if (Array.isArray(e)) return e;
            })(e) ||
            (function (e, t) {
              var n =
                null == e
                  ? null
                  : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                    e["@@iterator"];
              if (null != n) {
                var i,
                  a,
                  r = [],
                  s = !0,
                  o = !1;
                try {
                  for (
                    n = n.call(e);
                    !(s = (i = n.next()).done) &&
                    (r.push(i.value), !t || r.length !== t);
                    s = !0
                  );
                } catch (e) {
                  (o = !0), (a = e);
                } finally {
                  try {
                    s || null == n.return || n.return();
                  } finally {
                    if (o) throw a;
                  }
                }
                return r;
              }
            })(e, t) ||
            h(e, t) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function h(e, t) {
          if (e) {
            if ("string" == typeof e) return p(e, t);
            var n = Object.prototype.toString.call(e).slice(8, -1);
            return (
              "Object" === n && e.constructor && (n = e.constructor.name),
              "Map" === n || "Set" === n
                ? Array.from(e)
                : "Arguments" === n ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? p(e, t)
                : void 0
            );
          }
        }
        function p(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
          return i;
        }
        "object" == typeof navigator &&
          (e.exports = (function () {
            "use strict";
            function e(e, t, n) {
              return (
                t in e
                  ? Object.defineProperty(e, t, {
                      value: n,
                      enumerable: !0,
                      configurable: !0,
                      writable: !0,
                    })
                  : (e[t] = n),
                e
              );
            }
            function t(e, t) {
              for (var n = 0; n < t.length; n++) {
                var i = t[n];
                (i.enumerable = i.enumerable || !1),
                  (i.configurable = !0),
                  "value" in i && (i.writable = !0),
                  Object.defineProperty(e, i.key, i);
              }
            }
            function s(e, t, n) {
              return (
                t in e
                  ? Object.defineProperty(e, t, {
                      value: n,
                      enumerable: !0,
                      configurable: !0,
                      writable: !0,
                    })
                  : (e[t] = n),
                e
              );
            }
            function l(e, t) {
              var n = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var i = Object.getOwnPropertySymbols(e);
                t &&
                  (i = i.filter(function (t) {
                    return Object.getOwnPropertyDescriptor(e, t).enumerable;
                  })),
                  n.push.apply(n, i);
              }
              return n;
            }
            function u(e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = null != arguments[t] ? arguments[t] : {};
                t % 2
                  ? l(Object(n), !0).forEach(function (t) {
                      s(e, t, n[t]);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(
                      e,
                      Object.getOwnPropertyDescriptors(n)
                    )
                  : l(Object(n)).forEach(function (t) {
                      Object.defineProperty(
                        e,
                        t,
                        Object.getOwnPropertyDescriptor(n, t)
                      );
                    });
              }
              return e;
            }
            var h = { addCSS: !0, thumbWidth: 15, watch: !0 };
            function p(e, t) {
              return function () {
                return Array.from(document.querySelectorAll(t)).includes(this);
              }.call(e, t);
            }
            var m = function (e) {
                return null != e ? e.constructor : null;
              },
              f = function (e, t) {
                return !!(e && t && e instanceof t);
              },
              g = function (e) {
                return m(e) === String;
              },
              y = function (e) {
                return Array.isArray(e);
              },
              v = function (e) {
                return f(e, NodeList);
              },
              b = g,
              w = y,
              k = v,
              T = function (e) {
                return f(e, Element);
              },
              S = function (e) {
                return f(e, Event);
              },
              A = function (e) {
                return (
                  (function (e) {
                    return null == e;
                  })(e) ||
                  ((g(e) || y(e) || v(e)) && !e.length) ||
                  ((function (e) {
                    return m(e) === Object;
                  })(e) &&
                    !Object.keys(e).length)
                );
              };
            var C = (function () {
                function e(t, n) {
                  (function (e, t) {
                    if (!(e instanceof t))
                      throw new TypeError("Cannot call a class as a function");
                  })(this, e),
                    T(t)
                      ? (this.element = t)
                      : b(t) && (this.element = document.querySelector(t)),
                    T(this.element) &&
                      A(this.element.rangeTouch) &&
                      ((this.config = u({}, h, {}, n)), this.init());
                }
                return (
                  (function (e, n, i) {
                    n && t(e.prototype, n), i && t(e, i);
                  })(
                    e,
                    [
                      {
                        key: "init",
                        value: function () {
                          e.enabled &&
                            (this.config.addCSS &&
                              ((this.element.style.userSelect = "none"),
                              (this.element.style.webKitUserSelect = "none"),
                              (this.element.style.touchAction =
                                "manipulation")),
                            this.listeners(!0),
                            (this.element.rangeTouch = this));
                        },
                      },
                      {
                        key: "destroy",
                        value: function () {
                          e.enabled &&
                            (this.config.addCSS &&
                              ((this.element.style.userSelect = ""),
                              (this.element.style.webKitUserSelect = ""),
                              (this.element.style.touchAction = "")),
                            this.listeners(!1),
                            (this.element.rangeTouch = null));
                        },
                      },
                      {
                        key: "listeners",
                        value: function (e) {
                          var t = this,
                            n = e ? "addEventListener" : "removeEventListener";
                          ["touchstart", "touchmove", "touchend"].forEach(
                            function (e) {
                              t.element[n](
                                e,
                                function (e) {
                                  return t.set(e);
                                },
                                !1
                              );
                            }
                          );
                        },
                      },
                      {
                        key: "get",
                        value: function (t) {
                          if (!e.enabled || !S(t)) return null;
                          var n,
                            i = t.target,
                            a = t.changedTouches[0],
                            r = parseFloat(i.getAttribute("min")) || 0,
                            s = parseFloat(i.getAttribute("max")) || 100,
                            o = parseFloat(i.getAttribute("step")) || 1,
                            l = i.getBoundingClientRect(),
                            c =
                              ((100 / l.width) * (this.config.thumbWidth / 2)) /
                              100;
                          return (
                            0 > (n = (100 / l.width) * (a.clientX - l.left))
                              ? (n = 0)
                              : 100 < n && (n = 100),
                            50 > n
                              ? (n -= (100 - 2 * n) * c)
                              : 50 < n && (n += 2 * (n - 50) * c),
                            r +
                              (function (e, t) {
                                if (1 > t) {
                                  var n = (function (e) {
                                    var t = ""
                                      .concat(e)
                                      .match(
                                        /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
                                      );
                                    return t
                                      ? Math.max(
                                          0,
                                          (t[1] ? t[1].length : 0) -
                                            (t[2] ? +t[2] : 0)
                                        )
                                      : 0;
                                  })(t);
                                  return parseFloat(e.toFixed(n));
                                }
                                return Math.round(e / t) * t;
                              })((n / 100) * (s - r), o)
                          );
                        },
                      },
                      {
                        key: "set",
                        value: function (t) {
                          e.enabled &&
                            S(t) &&
                            !t.target.disabled &&
                            (t.preventDefault(),
                            (t.target.value = this.get(t)),
                            (function (e, t) {
                              if (e && t) {
                                var n = new Event(t, { bubbles: !0 });
                                e.dispatchEvent(n);
                              }
                            })(
                              t.target,
                              "touchend" === t.type ? "change" : "input"
                            ));
                        },
                      },
                    ],
                    [
                      {
                        key: "setup",
                        value: function (t) {
                          var n =
                              1 < arguments.length && void 0 !== arguments[1]
                                ? arguments[1]
                                : {},
                            i = null;
                          if (
                            (A(t) || b(t)
                              ? (i = Array.from(
                                  document.querySelectorAll(
                                    b(t) ? t : 'input[type="range"]'
                                  )
                                ))
                              : T(t)
                              ? (i = [t])
                              : k(t)
                              ? (i = Array.from(t))
                              : w(t) && (i = t.filter(T)),
                            A(i))
                          )
                            return null;
                          var a = u({}, h, {}, n);
                          if (b(t) && a.watch) {
                            var r = new MutationObserver(function (n) {
                              Array.from(n).forEach(function (n) {
                                Array.from(n.addedNodes).forEach(function (n) {
                                  T(n) && p(n, t) && new e(n, a);
                                });
                              });
                            });
                            r.observe(document.body, {
                              childList: !0,
                              subtree: !0,
                            });
                          }
                          return i.map(function (t) {
                            return new e(t, n);
                          });
                        },
                      },
                      {
                        key: "enabled",
                        get: function () {
                          return "ontouchstart" in document.documentElement;
                        },
                      },
                    ]
                  ),
                  e
                );
              })(),
              E = function (e) {
                return null != e ? e.constructor : null;
              },
              P = function (e, t) {
                return Boolean(e && t && e instanceof t);
              },
              M = function (e) {
                return null == e;
              },
              x = function (e) {
                return E(e) === Object;
              },
              L = function (e) {
                return E(e) === String;
              },
              j = function (e) {
                return E(e) === Function;
              },
              N = function (e) {
                return Array.isArray(e);
              },
              I = function (e) {
                return P(e, NodeList);
              },
              _ = function (e) {
                return (
                  M(e) ||
                  ((L(e) || N(e) || I(e)) && !e.length) ||
                  (x(e) && !Object.keys(e).length)
                );
              },
              O = M,
              q = x,
              D = function (e) {
                return E(e) === Number && !Number.isNaN(e);
              },
              H = L,
              F = function (e) {
                return E(e) === Boolean;
              },
              R = j,
              V = N,
              B = I,
              U = function (e) {
                return (
                  null !== e &&
                  "object" == typeof e &&
                  1 === e.nodeType &&
                  "object" == typeof e.style &&
                  "object" == typeof e.ownerDocument
                );
              },
              W = function (e) {
                return P(e, Event);
              },
              z = function (e) {
                return P(e, KeyboardEvent);
              },
              K = function (e) {
                return P(e, TextTrack) || (!M(e) && L(e.kind));
              },
              Y = function (e) {
                if (P(e, window.URL)) return !0;
                if (!L(e)) return !1;
                var t = e;
                (e.startsWith("http://") && e.startsWith("https://")) ||
                  (t = "http://".concat(e));
                try {
                  return !_(new URL(t).hostname);
                } catch (e) {
                  return !1;
                }
              },
              $ = _,
              Q = (function () {
                var e = document.createElement("span"),
                  t = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd otransitionend",
                    transition: "transitionend",
                  },
                  n = Object.keys(t).find(function (t) {
                    return void 0 !== e.style[t];
                  });
                return !!H(n) && t[n];
              })();
            function X(e, t) {
              setTimeout(function () {
                try {
                  (e.hidden = !0), e.offsetHeight, (e.hidden = !1);
                } catch (e) {}
              }, t);
            }
            var J = {
              isIE: Boolean(window.document.documentMode),
              isEdge: window.navigator.userAgent.includes("Edge"),
              isWebkit:
                "WebkitAppearance" in document.documentElement.style &&
                !/Edge/.test(navigator.userAgent),
              isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),
              isIos:
                ("MacIntel" === navigator.platform &&
                  navigator.maxTouchPoints > 1) ||
                /(iPad|iPhone|iPod)/gi.test(navigator.platform),
            };
            function G(e, t) {
              return t.split(".").reduce(function (e, t) {
                return e && e[t];
              }, e);
            }
            function Z() {
              for (
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : {},
                  t = arguments.length,
                  n = new Array(t > 1 ? t - 1 : 0),
                  i = 1;
                i < t;
                i++
              )
                n[i - 1] = arguments[i];
              if (!n.length) return e;
              var a = n.shift();
              return q(a)
                ? (Object.keys(a).forEach(function (t) {
                    q(a[t])
                      ? (Object.keys(e).includes(t) ||
                          Object.assign(e, { [t]: {} }),
                        Z(e[t], a[t]))
                      : Object.assign(e, { [t]: a[t] });
                  }),
                  Z.apply(void 0, [e].concat(n)))
                : e;
            }
            function ee(e, t) {
              var n = e.length ? e : [e];
              Array.from(n)
                .reverse()
                .forEach(function (e, n) {
                  var i = n > 0 ? t.cloneNode(!0) : t,
                    a = e.parentNode,
                    r = e.nextSibling;
                  i.appendChild(e), r ? a.insertBefore(i, r) : a.appendChild(i);
                });
            }
            function te(e, t) {
              U(e) &&
                !$(t) &&
                Object.entries(t)
                  .filter(function (e) {
                    var t = d(e, 2)[1];
                    return !O(t);
                  })
                  .forEach(function (t) {
                    var n = d(t, 2),
                      i = n[0],
                      a = n[1];
                    return e.setAttribute(i, a);
                  });
            }
            function ne(e, t, n) {
              var i = document.createElement(e);
              return q(t) && te(i, t), H(n) && (i.innerText = n), i;
            }
            function ie(e, t, n, i) {
              U(t) && t.appendChild(ne(e, n, i));
            }
            function ae(e) {
              B(e) || V(e)
                ? Array.from(e).forEach(ae)
                : U(e) && U(e.parentNode) && e.parentNode.removeChild(e);
            }
            function re(e) {
              if (U(e))
                for (var t = e.childNodes.length; t > 0; )
                  e.removeChild(e.lastChild), (t -= 1);
            }
            function se(e, t) {
              return U(t) && U(t.parentNode) && U(e)
                ? (t.parentNode.replaceChild(e, t), e)
                : null;
            }
            function oe(e, t) {
              if (!H(e) || $(e)) return {};
              var n = {},
                i = Z({}, t);
              return (
                e.split(",").forEach(function (e) {
                  var t = e.trim(),
                    a = t.replace(".", ""),
                    r = t.replace(/[[\]]/g, "").split("="),
                    s = d(r, 1)[0],
                    o = r.length > 1 ? r[1].replace(/["']/g, "") : "";
                  switch (t.charAt(0)) {
                    case ".":
                      H(i.class)
                        ? (n.class = "".concat(i.class, " ").concat(a))
                        : (n.class = a);
                      break;
                    case "#":
                      n.id = t.replace("#", "");
                      break;
                    case "[":
                      n[s] = o;
                  }
                }),
                Z(i, n)
              );
            }
            function le(e, t) {
              if (U(e)) {
                var n = t;
                F(n) || (n = !e.hidden), (e.hidden = n);
              }
            }
            function ce(e, t, n) {
              if (B(e))
                return Array.from(e).map(function (e) {
                  return ce(e, t, n);
                });
              if (U(e)) {
                var i = "toggle";
                return (
                  void 0 !== n && (i = n ? "add" : "remove"),
                  e.classList[i](t),
                  e.classList.contains(t)
                );
              }
              return !1;
            }
            function ue(e, t) {
              return U(e) && e.classList.contains(t);
            }
            function de(e, t) {
              var n = Element.prototype;
              return (
                n.matches ||
                n.webkitMatchesSelector ||
                n.mozMatchesSelector ||
                n.msMatchesSelector ||
                function () {
                  return Array.from(document.querySelectorAll(t)).includes(
                    this
                  );
                }
              ).call(e, t);
            }
            function he(e) {
              return this.elements.container.querySelectorAll(e);
            }
            function pe(e) {
              return this.elements.container.querySelector(e);
            }
            function me() {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : null,
                t =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1];
              U(e) &&
                (e.focus({ preventScroll: !0 }),
                t && ce(e, this.config.classNames.tabFocus));
            }
            var fe = {
                "audio/ogg": "vorbis",
                "audio/wav": "1",
                "video/webm": "vp8, vorbis",
                "video/mp4": "avc1.42E01E, mp4a.40.2",
                "video/ogg": "theora",
              },
              ge = {
                audio: "canPlayType" in document.createElement("audio"),
                video: "canPlayType" in document.createElement("video"),
                check(e, t, n) {
                  var i = J.isIPhone && n && ge.playsinline,
                    a = ge[e] || "html5" !== t;
                  return {
                    api: a,
                    ui:
                      a && ge.rangeInput && ("video" !== e || !J.isIPhone || i),
                  };
                },
                pip: !(
                  J.isIPhone ||
                  (!R(ne("video").webkitSetPresentationMode) &&
                    (!document.pictureInPictureEnabled ||
                      ne("video").disablePictureInPicture))
                ),
                airplay: R(window.WebKitPlaybackTargetAvailabilityEvent),
                playsinline: "playsInline" in document.createElement("video"),
                mime(e) {
                  if ($(e)) return !1;
                  var t = d(e.split("/"), 1)[0],
                    n = e;
                  if (!this.isHTML5 || t !== this.type) return !1;
                  Object.keys(fe).includes(n) &&
                    (n += '; codecs="'.concat(fe[e], '"'));
                  try {
                    return Boolean(
                      n && this.media.canPlayType(n).replace(/no/, "")
                    );
                  } catch (e) {
                    return !1;
                  }
                },
                textTracks: "textTracks" in document.createElement("video"),
                rangeInput: (function () {
                  var e = document.createElement("input");
                  return (e.type = "range"), "range" === e.type;
                })(),
                touch: "ontouchstart" in document.documentElement,
                transitions: !1 !== Q,
                reducedMotion:
                  "matchMedia" in window &&
                  window.matchMedia("(prefers-reduced-motion)").matches,
              },
              ye = (function () {
                var e = !1;
                try {
                  var t = Object.defineProperty({}, "passive", {
                    get: function () {
                      return (e = !0), null;
                    },
                  });
                  window.addEventListener("test", null, t),
                    window.removeEventListener("test", null, t);
                } catch (e) {}
                return e;
              })();
            function ve(e, t, n) {
              var i = this,
                a =
                  arguments.length > 3 &&
                  void 0 !== arguments[3] &&
                  arguments[3],
                r =
                  !(arguments.length > 4 && void 0 !== arguments[4]) ||
                  arguments[4],
                s =
                  arguments.length > 5 &&
                  void 0 !== arguments[5] &&
                  arguments[5];
              if (e && "addEventListener" in e && !$(t) && R(n)) {
                var o = t.split(" "),
                  l = s;
                ye && (l = { passive: r, capture: s }),
                  o.forEach(function (t) {
                    i &&
                      i.eventListeners &&
                      a &&
                      i.eventListeners.push({
                        element: e,
                        type: t,
                        callback: n,
                        options: l,
                      }),
                      e[a ? "addEventListener" : "removeEventListener"](
                        t,
                        n,
                        l
                      );
                  });
              }
            }
            function be(e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "",
                n = arguments.length > 2 ? arguments[2] : void 0,
                i =
                  !(arguments.length > 3 && void 0 !== arguments[3]) ||
                  arguments[3],
                a =
                  arguments.length > 4 &&
                  void 0 !== arguments[4] &&
                  arguments[4];
              ve.call(this, e, t, n, !0, i, a);
            }
            function we(e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "",
                n = arguments.length > 2 ? arguments[2] : void 0,
                i =
                  !(arguments.length > 3 && void 0 !== arguments[3]) ||
                  arguments[3],
                a =
                  arguments.length > 4 &&
                  void 0 !== arguments[4] &&
                  arguments[4];
              ve.call(this, e, t, n, !1, i, a);
            }
            function ke(e) {
              var t = this,
                n =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "",
                i = arguments.length > 2 ? arguments[2] : void 0,
                a =
                  !(arguments.length > 3 && void 0 !== arguments[3]) ||
                  arguments[3],
                r =
                  arguments.length > 4 &&
                  void 0 !== arguments[4] &&
                  arguments[4],
                s = function s() {
                  for (
                    var o = arguments.length, l = new Array(o), c = 0;
                    c < o;
                    c++
                  )
                    l[c] = arguments[c];
                  we(e, n, s, a, r), i.apply(t, l);
                };
              ve.call(this, e, n, s, !0, a, r);
            }
            function Te(e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "",
                n =
                  arguments.length > 2 &&
                  void 0 !== arguments[2] &&
                  arguments[2],
                i =
                  arguments.length > 3 && void 0 !== arguments[3]
                    ? arguments[3]
                    : {};
              if (U(e) && !$(t)) {
                var a = new CustomEvent(t, {
                  bubbles: n,
                  detail: c(c({}, i), {}, { plyr: this }),
                });
                e.dispatchEvent(a);
              }
            }
            function Se() {
              this &&
                this.eventListeners &&
                (this.eventListeners.forEach(function (e) {
                  var t = e.element,
                    n = e.type,
                    i = e.callback,
                    a = e.options;
                  t.removeEventListener(n, i, a);
                }),
                (this.eventListeners = []));
            }
            function Ae() {
              var e = this;
              return new Promise(function (t) {
                return e.ready
                  ? setTimeout(t, 0)
                  : be.call(e, e.elements.container, "ready", t);
              }).then(function () {});
            }
            function Ce(e) {
              (function (e) {
                return P(e, Promise) && j(e.then);
              })(e) && e.then(null, function () {});
            }
            function Ee(e) {
              return V(e)
                ? e.filter(function (t, n) {
                    return e.indexOf(t) === n;
                  })
                : e;
            }
            function Pe(e, t) {
              return V(e) && e.length
                ? e.reduce(function (e, n) {
                    return Math.abs(n - t) < Math.abs(e - t) ? n : e;
                  })
                : null;
            }
            function Me(e) {
              return !(!window || !window.CSS) && window.CSS.supports(e);
            }
            var xe = [
              [1, 1],
              [4, 3],
              [3, 4],
              [5, 4],
              [4, 5],
              [3, 2],
              [2, 3],
              [16, 10],
              [10, 16],
              [16, 9],
              [9, 16],
              [21, 9],
              [9, 21],
              [32, 9],
              [9, 32],
            ].reduce(function (e, t) {
              var n = d(t, 2),
                i = n[0],
                a = n[1];
              return c(c({}, e), {}, { [i / a]: [i, a] });
            }, {});
            function Le(e) {
              return (
                !!(V(e) || (H(e) && e.includes(":"))) &&
                (V(e) ? e : e.split(":")).map(Number).every(D)
              );
            }
            function je(e) {
              if (!V(e) || !e.every(D)) return null;
              var t = d(e, 2),
                n = t[0],
                i = t[1],
                a = (function e(t, n) {
                  return 0 === n ? t : e(n, t % n);
                })(n, i);
              return [n / a, i / a];
            }
            function Ne(e) {
              var t = function (e) {
                  return Le(e) ? e.split(":").map(Number) : null;
                },
                n = t(e);
              if (
                (null === n && (n = t(this.config.ratio)),
                null === n &&
                  !$(this.embed) &&
                  V(this.embed.ratio) &&
                  (n = this.embed.ratio),
                null === n && this.isHTML5)
              ) {
                var i = this.media;
                n = [i.videoWidth, i.videoHeight];
              }
              return je(n);
            }
            function Ie(e) {
              if (!this.isVideo) return {};
              var t = this.elements.wrapper,
                n = Ne.call(this, e);
              if (!V(n)) return {};
              var i = d(je(n), 2),
                a = i[0],
                r = i[1],
                s = (100 / a) * r;
              if (
                (Me("aspect-ratio: ".concat(a, "/").concat(r))
                  ? (t.style.aspectRatio = "".concat(a, "/").concat(r))
                  : (t.style.paddingBottom = "".concat(s, "%")),
                this.isVimeo && !this.config.vimeo.premium && this.supported.ui)
              ) {
                var o =
                    (100 / this.media.offsetWidth) *
                    parseInt(
                      window.getComputedStyle(this.media).paddingBottom,
                      10
                    ),
                  l = (o - s) / (o / 50);
                this.fullscreen.active
                  ? (t.style.paddingBottom = null)
                  : (this.media.style.transform = "translateY(-".concat(
                      l,
                      "%)"
                    ));
              } else
                this.isHTML5 &&
                  t.classList.add(this.config.classNames.videoFixedRatio);
              return { padding: s, ratio: n };
            }
            function _e(e, t) {
              var n =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 0.05,
                i = e / t,
                a = Pe(Object.keys(xe), i);
              return Math.abs(a - i) <= n ? xe[a] : [e, t];
            }
            var Oe = {
              getSources() {
                var e = this;
                return this.isHTML5
                  ? Array.from(this.media.querySelectorAll("source")).filter(
                      function (t) {
                        var n = t.getAttribute("type");
                        return !!$(n) || ge.mime.call(e, n);
                      }
                    )
                  : [];
              },
              getQualityOptions() {
                return this.config.quality.forced
                  ? this.config.quality.options
                  : Oe.getSources
                      .call(this)
                      .map(function (e) {
                        return Number(e.getAttribute("size"));
                      })
                      .filter(Boolean);
              },
              setup() {
                if (this.isHTML5) {
                  var e = this;
                  (e.options.speed = e.config.speed.options),
                    $(this.config.ratio) || Ie.call(e),
                    Object.defineProperty(e.media, "quality", {
                      get() {
                        var t = Oe.getSources.call(e).find(function (t) {
                          return t.getAttribute("src") === e.source;
                        });
                        return t && Number(t.getAttribute("size"));
                      },
                      set(t) {
                        if (e.quality !== t) {
                          if (
                            e.config.quality.forced &&
                            R(e.config.quality.onChange)
                          )
                            e.config.quality.onChange(t);
                          else {
                            var n = Oe.getSources.call(e).find(function (e) {
                              return Number(e.getAttribute("size")) === t;
                            });
                            if (!n) return;
                            var i = e.media,
                              a = i.currentTime,
                              r = i.paused,
                              s = i.preload,
                              o = i.readyState,
                              l = i.playbackRate;
                            (e.media.src = n.getAttribute("src")),
                              ("none" !== s || o) &&
                                (e.once("loadedmetadata", function () {
                                  (e.speed = l),
                                    (e.currentTime = a),
                                    r || Ce(e.play());
                                }),
                                e.media.load());
                          }
                          Te.call(e, e.media, "qualitychange", !1, {
                            quality: t,
                          });
                        }
                      },
                    });
                }
              },
              cancelRequests() {
                this.isHTML5 &&
                  (ae(Oe.getSources.call(this)),
                  this.media.setAttribute("src", this.config.blankVideo),
                  this.media.load(),
                  this.debug.log("Cancelled network requests"));
              },
            };
            function qe(e) {
              for (
                var t = arguments.length,
                  n = new Array(t > 1 ? t - 1 : 0),
                  i = 1;
                i < t;
                i++
              )
                n[i - 1] = arguments[i];
              return $(e)
                ? e
                : e.toString().replace(/{(\d+)}/g, function (e, t) {
                    return n[t].toString();
                  });
            }
            var De = function () {
                var e =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : "",
                  t =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : "";
                return (
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : ""
                ).replace(
                  new RegExp(
                    e.toString().replace(/([.*+?^=!:${}()|[\]/\\])/g, "\\$1"),
                    "g"
                  ),
                  t.toString()
                );
              },
              He = function () {
                return (
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : ""
                )
                  .toString()
                  .replace(/\w\S*/g, function (e) {
                    return e.charAt(0).toUpperCase() + e.slice(1).toLowerCase();
                  });
              };
            function Fe(e) {
              var t = document.createElement("div");
              return t.appendChild(e), t.innerHTML;
            }
            var Re = {
                pip: "PIP",
                airplay: "AirPlay",
                html5: "HTML5",
                vimeo: "Vimeo",
                youtube: "YouTube",
              },
              Ve = {
                get() {
                  var e =
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : "",
                    t =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                  if ($(e) || $(t)) return "";
                  var n = G(t.i18n, e);
                  if ($(n)) return Object.keys(Re).includes(e) ? Re[e] : "";
                  var i = { "{seektime}": t.seekTime, "{title}": t.title };
                  return (
                    Object.entries(i).forEach(function (e) {
                      var t = d(e, 2),
                        i = t[0],
                        a = t[1];
                      n = De(n, i, a);
                    }),
                    n
                  );
                },
              },
              Be = (function () {
                function t(n) {
                  var i = this;
                  r(this, t),
                    e(this, "get", function (e) {
                      if (!t.supported || !i.enabled) return null;
                      var n = window.localStorage.getItem(i.key);
                      if ($(n)) return null;
                      var a = JSON.parse(n);
                      return H(e) && e.length ? a[e] : a;
                    }),
                    e(this, "set", function (e) {
                      if (t.supported && i.enabled && q(e)) {
                        var n = i.get();
                        $(n) && (n = {}), Z(n, e);
                        try {
                          window.localStorage.setItem(i.key, JSON.stringify(n));
                        } catch (e) {}
                      }
                    }),
                    (this.enabled = n.config.storage.enabled),
                    (this.key = n.config.storage.key);
                }
                return (
                  o(t, null, [
                    {
                      key: "supported",
                      get: function () {
                        try {
                          if (!("localStorage" in window)) return !1;
                          var e = "___test";
                          return (
                            window.localStorage.setItem(e, e),
                            window.localStorage.removeItem(e),
                            !0
                          );
                        } catch (e) {
                          return !1;
                        }
                      },
                    },
                  ]),
                  t
                );
              })();
            function Ue(e) {
              var t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "text";
              return new Promise(function (n, i) {
                try {
                  var a = new XMLHttpRequest();
                  if (!("withCredentials" in a)) return;
                  a.addEventListener("load", function () {
                    if ("text" === t)
                      try {
                        n(JSON.parse(a.responseText));
                      } catch (e) {
                        n(a.responseText);
                      }
                    else n(a.response);
                  }),
                    a.addEventListener("error", function () {
                      throw new Error(a.status);
                    }),
                    a.open("GET", e, !0),
                    (a.responseType = t),
                    a.send();
                } catch (e) {
                  i(e);
                }
              });
            }
            function We(e, t) {
              if (H(e)) {
                var n = H(t),
                  i = function () {
                    return null !== document.getElementById(t);
                  },
                  a = function (e, t) {
                    (e.innerHTML = t),
                      (n && i()) ||
                        document.body.insertAdjacentElement("afterbegin", e);
                  };
                if (!n || !i()) {
                  var r = Be.supported,
                    s = document.createElement("div");
                  if (
                    (s.setAttribute("hidden", ""),
                    n && s.setAttribute("id", t),
                    r)
                  ) {
                    var o = window.localStorage.getItem("cache-".concat(t));
                    if (null !== o) {
                      var l = JSON.parse(o);
                      a(s, l.content);
                    }
                  }
                  Ue(e)
                    .then(function (e) {
                      if (!$(e)) {
                        if (r)
                          try {
                            window.localStorage.setItem(
                              "cache-".concat(t),
                              JSON.stringify({ content: e })
                            );
                          } catch (e) {}
                        a(s, e);
                      }
                    })
                    .catch(function () {});
                }
              }
            }
            var ze = function (e) {
              return Math.trunc((e / 60 / 60) % 60, 10);
            };
            function Ke() {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 0,
                t =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1],
                n =
                  arguments.length > 2 &&
                  void 0 !== arguments[2] &&
                  arguments[2];
              if (!D(e)) return Ke(void 0, t, n);
              var i,
                a = function (e) {
                  return "0".concat(e).slice(-2);
                },
                r = ze(e),
                s = ((i = e), Math.trunc((i / 60) % 60, 10)),
                o = (function (e) {
                  return Math.trunc(e % 60, 10);
                })(e);
              return (
                (r = t || r > 0 ? "".concat(r, ":") : ""),
                ""
                  .concat(n && e > 0 ? "-" : "")
                  .concat(r)
                  .concat(a(s), ":")
                  .concat(a(o))
              );
            }
            var Ye = {
              getIconUrl() {
                var e = new URL(this.config.iconUrl, window.location),
                  t = window.location.host
                    ? window.location.host
                    : window.top.location.host,
                  n = e.host !== t || (J.isIE && !window.svg4everybody);
                return { url: this.config.iconUrl, cors: n };
              },
              findElements() {
                try {
                  return (
                    (this.elements.controls = pe.call(
                      this,
                      this.config.selectors.controls.wrapper
                    )),
                    (this.elements.buttons = {
                      play: he.call(this, this.config.selectors.buttons.play),
                      pause: pe.call(this, this.config.selectors.buttons.pause),
                      restart: pe.call(
                        this,
                        this.config.selectors.buttons.restart
                      ),
                      rewind: pe.call(
                        this,
                        this.config.selectors.buttons.rewind
                      ),
                      fastForward: pe.call(
                        this,
                        this.config.selectors.buttons.fastForward
                      ),
                      mute: pe.call(this, this.config.selectors.buttons.mute),
                      pip: pe.call(this, this.config.selectors.buttons.pip),
                      airplay: pe.call(
                        this,
                        this.config.selectors.buttons.airplay
                      ),
                      settings: pe.call(
                        this,
                        this.config.selectors.buttons.settings
                      ),
                      captions: pe.call(
                        this,
                        this.config.selectors.buttons.captions
                      ),
                      fullscreen: pe.call(
                        this,
                        this.config.selectors.buttons.fullscreen
                      ),
                    }),
                    (this.elements.progress = pe.call(
                      this,
                      this.config.selectors.progress
                    )),
                    (this.elements.inputs = {
                      seek: pe.call(this, this.config.selectors.inputs.seek),
                      volume: pe.call(
                        this,
                        this.config.selectors.inputs.volume
                      ),
                    }),
                    (this.elements.display = {
                      buffer: pe.call(
                        this,
                        this.config.selectors.display.buffer
                      ),
                      currentTime: pe.call(
                        this,
                        this.config.selectors.display.currentTime
                      ),
                      duration: pe.call(
                        this,
                        this.config.selectors.display.duration
                      ),
                    }),
                    U(this.elements.progress) &&
                      (this.elements.display.seekTooltip =
                        this.elements.progress.querySelector(
                          ".".concat(this.config.classNames.tooltip)
                        )),
                    !0
                  );
                } catch (e) {
                  return (
                    this.debug.warn(
                      "It looks like there is a problem with your custom controls HTML",
                      e
                    ),
                    this.toggleNativeControls(!0),
                    !1
                  );
                }
              },
              createIcon(e, t) {
                var n = "http://www.w3.org/2000/svg",
                  i = Ye.getIconUrl.call(this),
                  a = ""
                    .concat(i.cors ? "" : i.url, "#")
                    .concat(this.config.iconPrefix),
                  r = document.createElementNS(n, "svg");
                te(r, Z(t, { "aria-hidden": "true", focusable: "false" }));
                var s = document.createElementNS(n, "use"),
                  o = "".concat(a, "-").concat(e);
                return (
                  "href" in s &&
                    s.setAttributeNS("http://www.w3.org/1999/xlink", "href", o),
                  s.setAttributeNS(
                    "http://www.w3.org/1999/xlink",
                    "xlink:href",
                    o
                  ),
                  r.appendChild(s),
                  r
                );
              },
              createLabel(e) {
                var t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  n = Ve.get(e, this.config);
                return ne(
                  "span",
                  c(
                    c({}, t),
                    {},
                    {
                      class: [t.class, this.config.classNames.hidden]
                        .filter(Boolean)
                        .join(" "),
                    }
                  ),
                  n
                );
              },
              createBadge(e) {
                if ($(e)) return null;
                var t = ne("span", {
                  class: this.config.classNames.menu.value,
                });
                return (
                  t.appendChild(
                    ne("span", { class: this.config.classNames.menu.badge }, e)
                  ),
                  t
                );
              },
              createButton(e, t) {
                var n = this,
                  i = Z({}, t),
                  a = (function () {
                    var e = (
                      arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : ""
                    ).toString();
                    return (
                      (e = (function () {
                        var e = (
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : ""
                        ).toString();
                        return (
                          (e = De(e, "-", " ")),
                          (e = De(e, "_", " ")),
                          (e = He(e)),
                          De(e, " ", "")
                        );
                      })(e)),
                      e.charAt(0).toLowerCase() + e.slice(1)
                    );
                  })(e),
                  r = {
                    element: "button",
                    toggle: !1,
                    label: null,
                    icon: null,
                    labelPressed: null,
                    iconPressed: null,
                  };
                switch (
                  (["element", "icon", "label"].forEach(function (e) {
                    Object.keys(i).includes(e) && ((r[e] = i[e]), delete i[e]);
                  }),
                  "button" !== r.element ||
                    Object.keys(i).includes("type") ||
                    (i.type = "button"),
                  Object.keys(i).includes("class")
                    ? i.class.split(" ").some(function (e) {
                        return e === n.config.classNames.control;
                      }) ||
                      Z(i, {
                        class: ""
                          .concat(i.class, " ")
                          .concat(this.config.classNames.control),
                      })
                    : (i.class = this.config.classNames.control),
                  e)
                ) {
                  case "play":
                    (r.toggle = !0),
                      (r.label = "play"),
                      (r.labelPressed = "pause"),
                      (r.icon = "play"),
                      (r.iconPressed = "pause");
                    break;
                  case "mute":
                    (r.toggle = !0),
                      (r.label = "mute"),
                      (r.labelPressed = "unmute"),
                      (r.icon = "volume"),
                      (r.iconPressed = "muted");
                    break;
                  case "captions":
                    (r.toggle = !0),
                      (r.label = "enableCaptions"),
                      (r.labelPressed = "disableCaptions"),
                      (r.icon = "captions-off"),
                      (r.iconPressed = "captions-on");
                    break;
                  case "fullscreen":
                    (r.toggle = !0),
                      (r.label = "enterFullscreen"),
                      (r.labelPressed = "exitFullscreen"),
                      (r.icon = "enter-fullscreen"),
                      (r.iconPressed = "exit-fullscreen");
                    break;
                  case "play-large":
                    (i.class += " ".concat(
                      this.config.classNames.control,
                      "--overlaid"
                    )),
                      (a = "play"),
                      (r.label = "play"),
                      (r.icon = "play");
                    break;
                  default:
                    $(r.label) && (r.label = a), $(r.icon) && (r.icon = e);
                }
                var s = ne(r.element);
                return (
                  r.toggle
                    ? (s.appendChild(
                        Ye.createIcon.call(this, r.iconPressed, {
                          class: "icon--pressed",
                        })
                      ),
                      s.appendChild(
                        Ye.createIcon.call(this, r.icon, {
                          class: "icon--not-pressed",
                        })
                      ),
                      s.appendChild(
                        Ye.createLabel.call(this, r.labelPressed, {
                          class: "label--pressed",
                        })
                      ),
                      s.appendChild(
                        Ye.createLabel.call(this, r.label, {
                          class: "label--not-pressed",
                        })
                      ))
                    : (s.appendChild(Ye.createIcon.call(this, r.icon)),
                      s.appendChild(Ye.createLabel.call(this, r.label))),
                  Z(i, oe(this.config.selectors.buttons[a], i)),
                  te(s, i),
                  "play" === a
                    ? (V(this.elements.buttons[a]) ||
                        (this.elements.buttons[a] = []),
                      this.elements.buttons[a].push(s))
                    : (this.elements.buttons[a] = s),
                  s
                );
              },
              createRange(e, t) {
                var n = ne(
                  "input",
                  Z(
                    oe(this.config.selectors.inputs[e]),
                    {
                      type: "range",
                      min: 0,
                      max: 100,
                      step: 0.01,
                      value: 0,
                      autocomplete: "off",
                      role: "slider",
                      "aria-label": Ve.get(e, this.config),
                      "aria-valuemin": 0,
                      "aria-valuemax": 100,
                      "aria-valuenow": 0,
                    },
                    t
                  )
                );
                return (
                  (this.elements.inputs[e] = n),
                  Ye.updateRangeFill.call(this, n),
                  C.setup(n),
                  n
                );
              },
              createProgress(e, t) {
                var n = ne(
                  "progress",
                  Z(
                    oe(this.config.selectors.display[e]),
                    {
                      min: 0,
                      max: 100,
                      value: 0,
                      role: "progressbar",
                      "aria-hidden": !0,
                    },
                    t
                  )
                );
                if ("volume" !== e) {
                  n.appendChild(ne("span", null, "0"));
                  var i = { played: "played", buffer: "buffered" }[e],
                    a = i ? Ve.get(i, this.config) : "";
                  n.innerText = "% ".concat(a.toLowerCase());
                }
                return (this.elements.display[e] = n), n;
              },
              createTime(e, t) {
                var n = oe(this.config.selectors.display[e], t),
                  i = ne(
                    "div",
                    Z(n, {
                      class: ""
                        .concat(n.class ? n.class : "", " ")
                        .concat(this.config.classNames.display.time, " ")
                        .trim(),
                      "aria-label": Ve.get(e, this.config),
                    }),
                    "00:00"
                  );
                return (this.elements.display[e] = i), i;
              },
              bindMenuItemShortcuts(e, t) {
                var n = this;
                be.call(
                  this,
                  e,
                  "keydown keyup",
                  function (i) {
                    if (
                      ["Space", "ArrowUp", "ArrowDown", "ArrowRight"].includes(
                        i.key
                      ) &&
                      (i.preventDefault(),
                      i.stopPropagation(),
                      "keydown" !== i.type)
                    ) {
                      var a,
                        r = de(e, '[role="menuitemradio"]');
                      !r && ["Space", "ArrowRight"].includes(i.key)
                        ? Ye.showMenuPanel.call(n, t, !0)
                        : "Space" !== i.key &&
                          ("ArrowDown" === i.key ||
                          (r && "ArrowRight" === i.key)
                            ? ((a = e.nextElementSibling),
                              U(a) || (a = e.parentNode.firstElementChild))
                            : ((a = e.previousElementSibling),
                              U(a) || (a = e.parentNode.lastElementChild)),
                          me.call(n, a, !0));
                    }
                  },
                  !1
                ),
                  be.call(this, e, "keyup", function (e) {
                    "Return" === e.key &&
                      Ye.focusFirstMenuItem.call(n, null, !0);
                  });
              },
              createMenuItem(e) {
                var t = this,
                  n = e.value,
                  i = e.list,
                  a = e.type,
                  r = e.title,
                  s = e.badge,
                  o = void 0 === s ? null : s,
                  l = e.checked,
                  c = void 0 !== l && l,
                  u = oe(this.config.selectors.inputs[a]),
                  d = ne(
                    "button",
                    Z(u, {
                      type: "button",
                      role: "menuitemradio",
                      class: ""
                        .concat(this.config.classNames.control, " ")
                        .concat(u.class ? u.class : "")
                        .trim(),
                      "aria-checked": c,
                      value: n,
                    })
                  ),
                  h = ne("span");
                (h.innerHTML = r),
                  U(o) && h.appendChild(o),
                  d.appendChild(h),
                  Object.defineProperty(d, "checked", {
                    enumerable: !0,
                    get: function () {
                      return "true" === d.getAttribute("aria-checked");
                    },
                    set(e) {
                      e &&
                        Array.from(d.parentNode.children)
                          .filter(function (e) {
                            return de(e, '[role="menuitemradio"]');
                          })
                          .forEach(function (e) {
                            return e.setAttribute("aria-checked", "false");
                          }),
                        d.setAttribute("aria-checked", e ? "true" : "false");
                    },
                  }),
                  this.listeners.bind(
                    d,
                    "click keyup",
                    function (e) {
                      if (!z(e) || "Space" === e.key) {
                        switch (
                          (e.preventDefault(),
                          e.stopPropagation(),
                          (d.checked = !0),
                          a)
                        ) {
                          case "language":
                            t.currentTrack = Number(n);
                            break;
                          case "quality":
                            t.quality = n;
                            break;
                          case "speed":
                            t.speed = parseFloat(n);
                        }
                        Ye.showMenuPanel.call(t, "home", z(e));
                      }
                    },
                    a,
                    !1
                  ),
                  Ye.bindMenuItemShortcuts.call(this, d, a),
                  i.appendChild(d);
              },
              formatTime() {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : 0,
                  t =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1];
                return D(e) ? Ke(e, ze(this.duration) > 0, t) : e;
              },
              updateTimeDisplay() {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null,
                  t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : 0,
                  n =
                    arguments.length > 2 &&
                    void 0 !== arguments[2] &&
                    arguments[2];
                U(e) && D(t) && (e.innerText = Ye.formatTime(t, n));
              },
              updateVolume() {
                this.supported.ui &&
                  (U(this.elements.inputs.volume) &&
                    Ye.setRange.call(
                      this,
                      this.elements.inputs.volume,
                      this.muted ? 0 : this.volume
                    ),
                  U(this.elements.buttons.mute) &&
                    (this.elements.buttons.mute.pressed =
                      this.muted || 0 === this.volume));
              },
              setRange(e) {
                var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : 0;
                U(e) && ((e.value = t), Ye.updateRangeFill.call(this, e));
              },
              updateProgress(e) {
                var t = this;
                if (this.supported.ui && W(e)) {
                  var n,
                    i,
                    a = 0;
                  if (e)
                    switch (e.type) {
                      case "timeupdate":
                      case "seeking":
                      case "seeked":
                        (n = this.currentTime),
                          (i = this.duration),
                          (a =
                            0 === n ||
                            0 === i ||
                            Number.isNaN(n) ||
                            Number.isNaN(i)
                              ? 0
                              : ((n / i) * 100).toFixed(2)),
                          "timeupdate" === e.type &&
                            Ye.setRange.call(
                              this,
                              this.elements.inputs.seek,
                              a
                            );
                        break;
                      case "playing":
                      case "progress":
                        !(function (e, n) {
                          var i = D(n) ? n : 0,
                            a = U(e) ? e : t.elements.display.buffer;
                          if (U(a)) {
                            a.value = i;
                            var r = a.getElementsByTagName("span")[0];
                            U(r) && (r.childNodes[0].nodeValue = i);
                          }
                        })(this.elements.display.buffer, 100 * this.buffered);
                    }
                }
              },
              updateRangeFill(e) {
                var t = W(e) ? e.target : e;
                if (U(t) && "range" === t.getAttribute("type")) {
                  if (de(t, this.config.selectors.inputs.seek)) {
                    t.setAttribute("aria-valuenow", this.currentTime);
                    var n = Ye.formatTime(this.currentTime),
                      i = Ye.formatTime(this.duration),
                      a = Ve.get("seekLabel", this.config);
                    t.setAttribute(
                      "aria-valuetext",
                      a.replace("{currentTime}", n).replace("{duration}", i)
                    );
                  } else if (de(t, this.config.selectors.inputs.volume)) {
                    var r = 100 * t.value;
                    t.setAttribute("aria-valuenow", r),
                      t.setAttribute(
                        "aria-valuetext",
                        "".concat(r.toFixed(1), "%")
                      );
                  } else t.setAttribute("aria-valuenow", t.value);
                  J.isWebkit &&
                    t.style.setProperty(
                      "--value",
                      (t.value / t.max) * 100 + "%"
                    );
                }
              },
              updateSeekTooltip(e) {
                var t, n;
                if (
                  this.config.tooltips.seek &&
                  U(this.elements.inputs.seek) &&
                  U(this.elements.display.seekTooltip) &&
                  0 !== this.duration
                ) {
                  var i = this.elements.display.seekTooltip,
                    a = "".concat(this.config.classNames.tooltip, "--visible"),
                    r = function (e) {
                      return ce(i, a, e);
                    };
                  if (this.touch) r(!1);
                  else {
                    var s = 0,
                      o = this.elements.progress.getBoundingClientRect();
                    if (W(e)) s = (100 / o.width) * (e.pageX - o.left);
                    else {
                      if (!ue(i, a)) return;
                      s = parseFloat(i.style.left, 10);
                    }
                    s < 0 ? (s = 0) : s > 100 && (s = 100);
                    var l = (this.duration / 100) * s;
                    i.innerText = Ye.formatTime(l);
                    var c =
                      null === (t = this.config.markers) ||
                      void 0 === t ||
                      null === (n = t.points) ||
                      void 0 === n
                        ? void 0
                        : n.find(function (e) {
                            return e.time === Math.round(l);
                          });
                    c &&
                      i.insertAdjacentHTML(
                        "afterbegin",
                        "".concat(c.label, "<br>")
                      ),
                      (i.style.left = "".concat(s, "%")),
                      W(e) &&
                        ["mouseenter", "mouseleave"].includes(e.type) &&
                        r("mouseenter" === e.type);
                  }
                }
              },
              timeUpdate(e) {
                var t =
                  !U(this.elements.display.duration) && this.config.invertTime;
                Ye.updateTimeDisplay.call(
                  this,
                  this.elements.display.currentTime,
                  t ? this.duration - this.currentTime : this.currentTime,
                  t
                ),
                  (e && "timeupdate" === e.type && this.media.seeking) ||
                    Ye.updateProgress.call(this, e);
              },
              durationUpdate() {
                if (
                  this.supported.ui &&
                  (this.config.invertTime || !this.currentTime)
                ) {
                  if (this.duration >= Math.pow(2, 32))
                    return (
                      le(this.elements.display.currentTime, !0),
                      void le(this.elements.progress, !0)
                    );
                  U(this.elements.inputs.seek) &&
                    this.elements.inputs.seek.setAttribute(
                      "aria-valuemax",
                      this.duration
                    );
                  var e = U(this.elements.display.duration);
                  !e &&
                    this.config.displayDuration &&
                    this.paused &&
                    Ye.updateTimeDisplay.call(
                      this,
                      this.elements.display.currentTime,
                      this.duration
                    ),
                    e &&
                      Ye.updateTimeDisplay.call(
                        this,
                        this.elements.display.duration,
                        this.duration
                      ),
                    this.config.markers.enabled && Ye.setMarkers.call(this),
                    Ye.updateSeekTooltip.call(this);
                }
              },
              toggleMenuButton(e, t) {
                le(this.elements.settings.buttons[e], !t);
              },
              updateSetting(e, t, n) {
                var i = this.elements.settings.panels[e],
                  a = null,
                  r = t;
                if ("captions" === e) a = this.currentTrack;
                else {
                  if (
                    ((a = $(n) ? this[e] : n),
                    $(a) && (a = this.config[e].default),
                    !$(this.options[e]) && !this.options[e].includes(a))
                  )
                    return void this.debug.warn(
                      "Unsupported value of '".concat(a, "' for ").concat(e)
                    );
                  if (!this.config[e].options.includes(a))
                    return void this.debug.warn(
                      "Disabled value of '".concat(a, "' for ").concat(e)
                    );
                }
                if (
                  (U(r) || (r = i && i.querySelector('[role="menu"]')), U(r))
                ) {
                  this.elements.settings.buttons[e].querySelector(
                    ".".concat(this.config.classNames.menu.value)
                  ).innerHTML = Ye.getLabel.call(this, e, a);
                  var s = r && r.querySelector('[value="'.concat(a, '"]'));
                  U(s) && (s.checked = !0);
                }
              },
              getLabel(e, t) {
                switch (e) {
                  case "speed":
                    return 1 === t
                      ? Ve.get("normal", this.config)
                      : "".concat(t, "&times;");
                  case "quality":
                    if (D(t)) {
                      var n = Ve.get("qualityLabel.".concat(t), this.config);
                      return n.length ? n : "".concat(t, "p");
                    }
                    return He(t);
                  case "captions":
                    return Xe.getLabel.call(this);
                  default:
                    return null;
                }
              },
              setQualityMenu(e) {
                var t = this;
                if (U(this.elements.settings.panels.quality)) {
                  var n = "quality",
                    i =
                      this.elements.settings.panels.quality.querySelector(
                        '[role="menu"]'
                      );
                  V(e) &&
                    (this.options.quality = Ee(e).filter(function (e) {
                      return t.config.quality.options.includes(e);
                    }));
                  var a =
                    !$(this.options.quality) && this.options.quality.length > 1;
                  if (
                    (Ye.toggleMenuButton.call(this, n, a),
                    re(i),
                    Ye.checkMenu.call(this),
                    a)
                  ) {
                    var r = function (e) {
                      var n = Ve.get("qualityBadge.".concat(e), t.config);
                      return n.length ? Ye.createBadge.call(t, n) : null;
                    };
                    this.options.quality
                      .sort(function (e, n) {
                        var i = t.config.quality.options;
                        return i.indexOf(e) > i.indexOf(n) ? 1 : -1;
                      })
                      .forEach(function (e) {
                        Ye.createMenuItem.call(t, {
                          value: e,
                          list: i,
                          type: n,
                          title: Ye.getLabel.call(t, "quality", e),
                          badge: r(e),
                        });
                      }),
                      Ye.updateSetting.call(this, n, i);
                  }
                }
              },
              setCaptionsMenu() {
                var e = this;
                if (U(this.elements.settings.panels.captions)) {
                  var t = "captions",
                    n =
                      this.elements.settings.panels.captions.querySelector(
                        '[role="menu"]'
                      ),
                    i = Xe.getTracks.call(this),
                    a = Boolean(i.length);
                  if (
                    (Ye.toggleMenuButton.call(this, t, a),
                    re(n),
                    Ye.checkMenu.call(this),
                    a)
                  ) {
                    var r = i.map(function (t, i) {
                      return {
                        value: i,
                        checked: e.captions.toggled && e.currentTrack === i,
                        title: Xe.getLabel.call(e, t),
                        badge:
                          t.language &&
                          Ye.createBadge.call(e, t.language.toUpperCase()),
                        list: n,
                        type: "language",
                      };
                    });
                    r.unshift({
                      value: -1,
                      checked: !this.captions.toggled,
                      title: Ve.get("disabled", this.config),
                      list: n,
                      type: "language",
                    }),
                      r.forEach(Ye.createMenuItem.bind(this)),
                      Ye.updateSetting.call(this, t, n);
                  }
                }
              },
              setSpeedMenu() {
                var e = this;
                if (U(this.elements.settings.panels.speed)) {
                  var t = "speed",
                    n =
                      this.elements.settings.panels.speed.querySelector(
                        '[role="menu"]'
                      );
                  this.options.speed = this.options.speed.filter(function (t) {
                    return t >= e.minimumSpeed && t <= e.maximumSpeed;
                  });
                  var i =
                    !$(this.options.speed) && this.options.speed.length > 1;
                  Ye.toggleMenuButton.call(this, t, i),
                    re(n),
                    Ye.checkMenu.call(this),
                    i &&
                      (this.options.speed.forEach(function (i) {
                        Ye.createMenuItem.call(e, {
                          value: i,
                          list: n,
                          type: t,
                          title: Ye.getLabel.call(e, "speed", i),
                        });
                      }),
                      Ye.updateSetting.call(this, t, n));
                }
              },
              checkMenu() {
                var e = this.elements.settings.buttons,
                  t =
                    !$(e) &&
                    Object.values(e).some(function (e) {
                      return !e.hidden;
                    });
                le(this.elements.settings.menu, !t);
              },
              focusFirstMenuItem(e) {
                var t =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1];
                if (!this.elements.settings.popup.hidden) {
                  var n = e;
                  U(n) ||
                    (n = Object.values(this.elements.settings.panels).find(
                      function (e) {
                        return !e.hidden;
                      }
                    ));
                  var i = n.querySelector('[role^="menuitem"]');
                  me.call(this, i, t);
                }
              },
              toggleMenu(e) {
                var t = this.elements.settings.popup,
                  n = this.elements.buttons.settings;
                if (U(t) && U(n)) {
                  var i = t.hidden,
                    a = i;
                  if (F(e)) a = e;
                  else if (z(e) && "Escape" === e.key) a = !1;
                  else if (W(e)) {
                    var r = R(e.composedPath) ? e.composedPath()[0] : e.target,
                      s = t.contains(r);
                    if (s || (!s && e.target !== n && a)) return;
                  }
                  n.setAttribute("aria-expanded", a),
                    le(t, !a),
                    ce(
                      this.elements.container,
                      this.config.classNames.menu.open,
                      a
                    ),
                    a && z(e)
                      ? Ye.focusFirstMenuItem.call(this, null, !0)
                      : a || i || me.call(this, n, z(e));
                }
              },
              getMenuSize(e) {
                var t = e.cloneNode(!0);
                (t.style.position = "absolute"),
                  (t.style.opacity = 0),
                  t.removeAttribute("hidden"),
                  e.parentNode.appendChild(t);
                var n = t.scrollWidth,
                  i = t.scrollHeight;
                return ae(t), { width: n, height: i };
              },
              showMenuPanel() {
                var e = this,
                  t =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : "",
                  n =
                    arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                  i = this.elements.container.querySelector(
                    "#plyr-settings-".concat(this.id, "-").concat(t)
                  );
                if (U(i)) {
                  var a = i.parentNode,
                    r = Array.from(a.children).find(function (e) {
                      return !e.hidden;
                    });
                  if (ge.transitions && !ge.reducedMotion) {
                    (a.style.width = "".concat(r.scrollWidth, "px")),
                      (a.style.height = "".concat(r.scrollHeight, "px"));
                    var s = Ye.getMenuSize.call(this, i);
                    be.call(this, a, Q, function t(n) {
                      n.target === a &&
                        ["width", "height"].includes(n.propertyName) &&
                        ((a.style.width = ""),
                        (a.style.height = ""),
                        we.call(e, a, Q, t));
                    }),
                      (a.style.width = "".concat(s.width, "px")),
                      (a.style.height = "".concat(s.height, "px"));
                  }
                  le(r, !0), le(i, !1), Ye.focusFirstMenuItem.call(this, i, n);
                }
              },
              setDownloadUrl() {
                var e = this.elements.buttons.download;
                U(e) && e.setAttribute("href", this.download);
              },
              create(e) {
                var t = this,
                  n = Ye.bindMenuItemShortcuts,
                  i = Ye.createButton,
                  a = Ye.createProgress,
                  r = Ye.createRange,
                  s = Ye.createTime,
                  o = Ye.setQualityMenu,
                  l = Ye.setSpeedMenu,
                  c = Ye.showMenuPanel;
                (this.elements.controls = null),
                  V(this.config.controls) &&
                    this.config.controls.includes("play-large") &&
                    this.elements.container.appendChild(
                      i.call(this, "play-large")
                    );
                var u = ne("div", oe(this.config.selectors.controls.wrapper));
                this.elements.controls = u;
                var d = { class: "plyr__controls__item" };
                return (
                  Ee(
                    V(this.config.controls) ? this.config.controls : []
                  ).forEach(function (o) {
                    if (
                      ("restart" === o &&
                        u.appendChild(i.call(t, "restart", d)),
                      "rewind" === o && u.appendChild(i.call(t, "rewind", d)),
                      "play" === o && u.appendChild(i.call(t, "play", d)),
                      "fast-forward" === o &&
                        u.appendChild(i.call(t, "fast-forward", d)),
                      "progress" === o)
                    ) {
                      var l = ne("div", {
                          class: "".concat(
                            d.class,
                            " plyr__progress__container"
                          ),
                        }),
                        h = ne("div", oe(t.config.selectors.progress));
                      if (
                        (h.appendChild(
                          r.call(t, "seek", { id: "plyr-seek-".concat(e.id) })
                        ),
                        h.appendChild(a.call(t, "buffer")),
                        t.config.tooltips.seek)
                      ) {
                        var p = ne(
                          "span",
                          { class: t.config.classNames.tooltip },
                          "00:00"
                        );
                        h.appendChild(p), (t.elements.display.seekTooltip = p);
                      }
                      (t.elements.progress = h),
                        l.appendChild(t.elements.progress),
                        u.appendChild(l);
                    }
                    if (
                      ("current-time" === o &&
                        u.appendChild(s.call(t, "currentTime", d)),
                      "duration" === o &&
                        u.appendChild(s.call(t, "duration", d)),
                      "mute" === o || "volume" === o)
                    ) {
                      var m = t.elements.volume;
                      if (
                        ((U(m) && u.contains(m)) ||
                          ((m = ne(
                            "div",
                            Z({}, d, {
                              class: "".concat(d.class, " plyr__volume").trim(),
                            })
                          )),
                          (t.elements.volume = m),
                          u.appendChild(m)),
                        "mute" === o && m.appendChild(i.call(t, "mute")),
                        "volume" === o && !J.isIos)
                      ) {
                        var f = { max: 1, step: 0.05, value: t.config.volume };
                        m.appendChild(
                          r.call(
                            t,
                            "volume",
                            Z(f, { id: "plyr-volume-".concat(e.id) })
                          )
                        );
                      }
                    }
                    if (
                      ("captions" === o &&
                        u.appendChild(i.call(t, "captions", d)),
                      "settings" === o && !$(t.config.settings))
                    ) {
                      var g = ne(
                        "div",
                        Z({}, d, {
                          class: "".concat(d.class, " plyr__menu").trim(),
                          hidden: "",
                        })
                      );
                      g.appendChild(
                        i.call(t, "settings", {
                          "aria-haspopup": !0,
                          "aria-controls": "plyr-settings-".concat(e.id),
                          "aria-expanded": !1,
                        })
                      );
                      var y = ne("div", {
                          class: "plyr__menu__container",
                          id: "plyr-settings-".concat(e.id),
                          hidden: "",
                        }),
                        v = ne("div"),
                        b = ne("div", {
                          id: "plyr-settings-".concat(e.id, "-home"),
                        }),
                        w = ne("div", { role: "menu" });
                      b.appendChild(w),
                        v.appendChild(b),
                        (t.elements.settings.panels.home = b),
                        t.config.settings.forEach(function (i) {
                          var a = ne(
                            "button",
                            Z(oe(t.config.selectors.buttons.settings), {
                              type: "button",
                              class: ""
                                .concat(t.config.classNames.control, " ")
                                .concat(
                                  t.config.classNames.control,
                                  "--forward"
                                ),
                              role: "menuitem",
                              "aria-haspopup": !0,
                              hidden: "",
                            })
                          );
                          n.call(t, a, i),
                            be.call(t, a, "click", function () {
                              c.call(t, i, !1);
                            });
                          var r = ne("span", null, Ve.get(i, t.config)),
                            s = ne("span", {
                              class: t.config.classNames.menu.value,
                            });
                          (s.innerHTML = e[i]),
                            r.appendChild(s),
                            a.appendChild(r),
                            w.appendChild(a);
                          var o = ne("div", {
                              id: "plyr-settings-".concat(e.id, "-").concat(i),
                              hidden: "",
                            }),
                            l = ne("button", {
                              type: "button",
                              class: ""
                                .concat(t.config.classNames.control, " ")
                                .concat(t.config.classNames.control, "--back"),
                            });
                          l.appendChild(
                            ne(
                              "span",
                              { "aria-hidden": !0 },
                              Ve.get(i, t.config)
                            )
                          ),
                            l.appendChild(
                              ne(
                                "span",
                                { class: t.config.classNames.hidden },
                                Ve.get("menuBack", t.config)
                              )
                            ),
                            be.call(
                              t,
                              o,
                              "keydown",
                              function (e) {
                                "ArrowLeft" === e.key &&
                                  (e.preventDefault(),
                                  e.stopPropagation(),
                                  c.call(t, "home", !0));
                              },
                              !1
                            ),
                            be.call(t, l, "click", function () {
                              c.call(t, "home", !1);
                            }),
                            o.appendChild(l),
                            o.appendChild(ne("div", { role: "menu" })),
                            v.appendChild(o),
                            (t.elements.settings.buttons[i] = a),
                            (t.elements.settings.panels[i] = o);
                        }),
                        y.appendChild(v),
                        g.appendChild(y),
                        u.appendChild(g),
                        (t.elements.settings.popup = y),
                        (t.elements.settings.menu = g);
                    }
                    if (
                      ("pip" === o &&
                        ge.pip &&
                        u.appendChild(i.call(t, "pip", d)),
                      "airplay" === o &&
                        ge.airplay &&
                        u.appendChild(i.call(t, "airplay", d)),
                      "download" === o)
                    ) {
                      var k = Z({}, d, {
                        element: "a",
                        href: t.download,
                        target: "_blank",
                      });
                      t.isHTML5 && (k.download = "");
                      var T = t.config.urls.download;
                      !Y(T) &&
                        t.isEmbed &&
                        Z(k, {
                          icon: "logo-".concat(t.provider),
                          label: t.provider,
                        }),
                        u.appendChild(i.call(t, "download", k));
                    }
                    "fullscreen" === o &&
                      u.appendChild(i.call(t, "fullscreen", d));
                  }),
                  this.isHTML5 && o.call(this, Oe.getQualityOptions.call(this)),
                  l.call(this),
                  u
                );
              },
              inject() {
                var e = this;
                if (this.config.loadSprite) {
                  var t = Ye.getIconUrl.call(this);
                  t.cors && We(t.url, "sprite-plyr");
                }
                this.id = Math.floor(1e4 * Math.random());
                var n = null;
                this.elements.controls = null;
                var i,
                  a = {
                    id: this.id,
                    seektime: this.config.seekTime,
                    title: this.config.title,
                  },
                  r = !0;
                if (
                  (R(this.config.controls) &&
                    (this.config.controls = this.config.controls.call(this, a)),
                  this.config.controls || (this.config.controls = []),
                  U(this.config.controls) || H(this.config.controls)
                    ? (n = this.config.controls)
                    : ((n = Ye.create.call(this, {
                        id: this.id,
                        seektime: this.config.seekTime,
                        speed: this.speed,
                        quality: this.quality,
                        captions: Xe.getLabel.call(this),
                      })),
                      (r = !1)),
                  r &&
                    H(this.config.controls) &&
                    (n = (function (e) {
                      var t = e;
                      return (
                        Object.entries(a).forEach(function (e) {
                          var n = d(e, 2),
                            i = n[0],
                            a = n[1];
                          t = De(t, "{".concat(i, "}"), a);
                        }),
                        t
                      );
                    })(n)),
                  H(this.config.selectors.controls.container) &&
                    (i = document.querySelector(
                      this.config.selectors.controls.container
                    )),
                  U(i) || (i = this.elements.container),
                  i[U(n) ? "insertAdjacentElement" : "insertAdjacentHTML"](
                    "afterbegin",
                    n
                  ),
                  U(this.elements.controls) || Ye.findElements.call(this),
                  !$(this.elements.buttons))
                ) {
                  var s = function (t) {
                    var n = e.config.classNames.controlPressed;
                    Object.defineProperty(t, "pressed", {
                      enumerable: !0,
                      get: function () {
                        return ue(t, n);
                      },
                      set() {
                        ce(
                          t,
                          n,
                          arguments.length > 0 &&
                            void 0 !== arguments[0] &&
                            arguments[0]
                        );
                      },
                    });
                  };
                  Object.values(this.elements.buttons)
                    .filter(Boolean)
                    .forEach(function (e) {
                      V(e) || B(e)
                        ? Array.from(e).filter(Boolean).forEach(s)
                        : s(e);
                    });
                }
                if ((J.isEdge && X(i), this.config.tooltips.controls)) {
                  var o = this.config,
                    l = o.classNames,
                    c = o.selectors,
                    u = ""
                      .concat(c.controls.wrapper, " ")
                      .concat(c.labels, " .")
                      .concat(l.hidden),
                    h = he.call(this, u);
                  Array.from(h).forEach(function (t) {
                    ce(t, e.config.classNames.hidden, !1),
                      ce(t, e.config.classNames.tooltip, !0);
                  });
                }
              },
              setMediaMetadata() {
                try {
                  "mediaSession" in navigator &&
                    (navigator.mediaSession.metadata = new window.MediaMetadata(
                      {
                        title: this.config.mediaMetadata.title,
                        artist: this.config.mediaMetadata.artist,
                        album: this.config.mediaMetadata.album,
                        artwork: this.config.mediaMetadata.artwork,
                      }
                    ));
                } catch (e) {}
              },
              setMarkers() {
                var e,
                  t,
                  n = this;
                if (this.duration && !this.elements.markers) {
                  var i =
                    null === (e = this.config.markers) ||
                    void 0 === e ||
                    null === (t = e.points) ||
                    void 0 === t
                      ? void 0
                      : t.filter(function (e) {
                          var t = e.time;
                          return t > 0 && t < n.duration;
                        });
                  if (null != i && i.length) {
                    var a = document.createDocumentFragment(),
                      r = document.createDocumentFragment(),
                      s = null,
                      o = "".concat(
                        this.config.classNames.tooltip,
                        "--visible"
                      ),
                      l = function (e) {
                        return ce(s, o, e);
                      };
                    i.forEach(function (e) {
                      var t = ne(
                          "span",
                          { class: n.config.classNames.marker },
                          ""
                        ),
                        i = (e.time / n.duration) * 100 + "%";
                      s &&
                        (t.addEventListener("mouseenter", function () {
                          e.label ||
                            ((s.style.left = i),
                            (s.innerHTML = e.label),
                            l(!0));
                        }),
                        t.addEventListener("mouseleave", function () {
                          l(!1);
                        })),
                        t.addEventListener("click", function () {
                          n.currentTime = e.time;
                        }),
                        (t.style.left = i),
                        r.appendChild(t);
                    }),
                      a.appendChild(r),
                      this.config.tooltips.seek ||
                        ((s = ne(
                          "span",
                          { class: this.config.classNames.tooltip },
                          ""
                        )),
                        a.appendChild(s)),
                      (this.elements.markers = { points: r, tip: s }),
                      this.elements.progress.appendChild(a);
                  }
                }
              },
            };
            function $e(e) {
              var t = e;
              if (
                !(arguments.length > 1 && void 0 !== arguments[1]) ||
                arguments[1]
              ) {
                var n = document.createElement("a");
                (n.href = t), (t = n.href);
              }
              try {
                return new URL(t);
              } catch (e) {
                return null;
              }
            }
            function Qe(e) {
              var t = new URLSearchParams();
              return (
                q(e) &&
                  Object.entries(e).forEach(function (e) {
                    var n = d(e, 2),
                      i = n[0],
                      a = n[1];
                    t.set(i, a);
                  }),
                t
              );
            }
            var Xe = {
                setup() {
                  if (this.supported.ui)
                    if (
                      !this.isVideo ||
                      this.isYouTube ||
                      (this.isHTML5 && !ge.textTracks)
                    )
                      V(this.config.controls) &&
                        this.config.controls.includes("settings") &&
                        this.config.settings.includes("captions") &&
                        Ye.setCaptionsMenu.call(this);
                    else {
                      var e, t;
                      if (
                        (U(this.elements.captions) ||
                          ((this.elements.captions = ne(
                            "div",
                            oe(this.config.selectors.captions)
                          )),
                          (e = this.elements.captions),
                          (t = this.elements.wrapper),
                          U(e) &&
                            U(t) &&
                            t.parentNode.insertBefore(e, t.nextSibling)),
                        J.isIE && window.URL)
                      ) {
                        var n = this.media.querySelectorAll("track");
                        Array.from(n).forEach(function (e) {
                          var t = e.getAttribute("src"),
                            n = $e(t);
                          null !== n &&
                            n.hostname !== window.location.href.hostname &&
                            ["http:", "https:"].includes(n.protocol) &&
                            Ue(t, "blob")
                              .then(function (t) {
                                e.setAttribute(
                                  "src",
                                  window.URL.createObjectURL(t)
                                );
                              })
                              .catch(function () {
                                ae(e);
                              });
                        });
                      }
                      var i = Ee(
                          (
                            navigator.languages || [
                              navigator.language ||
                                navigator.userLanguage ||
                                "en",
                            ]
                          ).map(function (e) {
                            return e.split("-")[0];
                          })
                        ),
                        a = (
                          this.storage.get("language") ||
                          this.config.captions.language ||
                          "auto"
                        ).toLowerCase();
                      "auto" === a && (a = d(i, 1)[0]);
                      var r = this.storage.get("captions");
                      if (
                        (F(r) || (r = this.config.captions.active),
                        Object.assign(this.captions, {
                          toggled: !1,
                          active: r,
                          language: a,
                          languages: i,
                        }),
                        this.isHTML5)
                      ) {
                        var s = this.config.captions.update
                          ? "addtrack removetrack"
                          : "removetrack";
                        be.call(
                          this,
                          this.media.textTracks,
                          s,
                          Xe.update.bind(this)
                        );
                      }
                      setTimeout(Xe.update.bind(this), 0);
                    }
                },
                update() {
                  var e = this,
                    t = Xe.getTracks.call(this, !0),
                    n = this.captions,
                    i = n.active,
                    a = n.language,
                    r = n.meta,
                    s = n.currentTrackNode,
                    o = Boolean(
                      t.find(function (e) {
                        return e.language === a;
                      })
                    );
                  this.isHTML5 &&
                    this.isVideo &&
                    t
                      .filter(function (e) {
                        return !r.get(e);
                      })
                      .forEach(function (t) {
                        e.debug.log("Track added", t),
                          r.set(t, { default: "showing" === t.mode }),
                          "showing" === t.mode && (t.mode = "hidden"),
                          be.call(e, t, "cuechange", function () {
                            return Xe.updateCues.call(e);
                          });
                      }),
                    ((o && this.language !== a) || !t.includes(s)) &&
                      (Xe.setLanguage.call(this, a),
                      Xe.toggle.call(this, i && o)),
                    this.elements &&
                      ce(
                        this.elements.container,
                        this.config.classNames.captions.enabled,
                        !$(t)
                      ),
                    V(this.config.controls) &&
                      this.config.controls.includes("settings") &&
                      this.config.settings.includes("captions") &&
                      Ye.setCaptionsMenu.call(this);
                },
                toggle(e) {
                  var t = this,
                    n =
                      !(arguments.length > 1 && void 0 !== arguments[1]) ||
                      arguments[1];
                  if (this.supported.ui) {
                    var i = this.captions.toggled,
                      r = this.config.classNames.captions.active,
                      s = O(e) ? !i : e;
                    if (s !== i) {
                      if (
                        (n ||
                          ((this.captions.active = s),
                          this.storage.set({ captions: s })),
                        !this.language && s && !n)
                      ) {
                        var o = Xe.getTracks.call(this),
                          l = Xe.findTrack.call(
                            this,
                            [this.captions.language].concat(
                              a(this.captions.languages)
                            ),
                            !0
                          );
                        return (
                          (this.captions.language = l.language),
                          void Xe.set.call(this, o.indexOf(l))
                        );
                      }
                      this.elements.buttons.captions &&
                        (this.elements.buttons.captions.pressed = s),
                        ce(this.elements.container, r, s),
                        (this.captions.toggled = s),
                        Ye.updateSetting.call(this, "captions"),
                        Te.call(
                          this,
                          this.media,
                          s ? "captionsenabled" : "captionsdisabled"
                        );
                    }
                    setTimeout(function () {
                      s &&
                        t.captions.toggled &&
                        (t.captions.currentTrackNode.mode = "hidden");
                    });
                  }
                },
                set(e) {
                  var t =
                      !(arguments.length > 1 && void 0 !== arguments[1]) ||
                      arguments[1],
                    n = Xe.getTracks.call(this);
                  if (-1 !== e)
                    if (D(e))
                      if (e in n) {
                        if (this.captions.currentTrack !== e) {
                          this.captions.currentTrack = e;
                          var i = n[e],
                            a = (i || {}).language;
                          (this.captions.currentTrackNode = i),
                            Ye.updateSetting.call(this, "captions"),
                            t ||
                              ((this.captions.language = a),
                              this.storage.set({ language: a })),
                            this.isVimeo && this.embed.enableTextTrack(a),
                            Te.call(this, this.media, "languagechange");
                        }
                        Xe.toggle.call(this, !0, t),
                          this.isHTML5 &&
                            this.isVideo &&
                            Xe.updateCues.call(this);
                      } else this.debug.warn("Track not found", e);
                    else this.debug.warn("Invalid caption argument", e);
                  else Xe.toggle.call(this, !1, t);
                },
                setLanguage(e) {
                  var t =
                    !(arguments.length > 1 && void 0 !== arguments[1]) ||
                    arguments[1];
                  if (H(e)) {
                    var n = e.toLowerCase();
                    this.captions.language = n;
                    var i = Xe.getTracks.call(this),
                      a = Xe.findTrack.call(this, [n]);
                    Xe.set.call(this, i.indexOf(a), t);
                  } else this.debug.warn("Invalid language argument", e);
                },
                getTracks() {
                  var e = this,
                    t =
                      arguments.length > 0 &&
                      void 0 !== arguments[0] &&
                      arguments[0];
                  return Array.from((this.media || {}).textTracks || [])
                    .filter(function (n) {
                      return !e.isHTML5 || t || e.captions.meta.has(n);
                    })
                    .filter(function (e) {
                      return ["captions", "subtitles"].includes(e.kind);
                    });
                },
                findTrack(e) {
                  var t,
                    n = this,
                    i =
                      arguments.length > 1 &&
                      void 0 !== arguments[1] &&
                      arguments[1],
                    a = Xe.getTracks.call(this),
                    r = function (e) {
                      return Number((n.captions.meta.get(e) || {}).default);
                    },
                    s = Array.from(a).sort(function (e, t) {
                      return r(t) - r(e);
                    });
                  return (
                    e.every(function (e) {
                      return (
                        (t = s.find(function (t) {
                          return t.language === e;
                        })),
                        !t
                      );
                    }),
                    t || (i ? s[0] : void 0)
                  );
                },
                getCurrentTrack() {
                  return Xe.getTracks.call(this)[this.currentTrack];
                },
                getLabel(e) {
                  var t = e;
                  return (
                    !K(t) &&
                      ge.textTracks &&
                      this.captions.toggled &&
                      (t = Xe.getCurrentTrack.call(this)),
                    K(t)
                      ? $(t.label)
                        ? $(t.language)
                          ? Ve.get("enabled", this.config)
                          : e.language.toUpperCase()
                        : t.label
                      : Ve.get("disabled", this.config)
                  );
                },
                updateCues(e) {
                  if (this.supported.ui)
                    if (U(this.elements.captions))
                      if (O(e) || Array.isArray(e)) {
                        var t = e;
                        if (!t) {
                          var n = Xe.getCurrentTrack.call(this);
                          t = Array.from((n || {}).activeCues || [])
                            .map(function (e) {
                              return e.getCueAsHTML();
                            })
                            .map(Fe);
                        }
                        var i = t
                          .map(function (e) {
                            return e.trim();
                          })
                          .join("\n");
                        if (i !== this.elements.captions.innerHTML) {
                          re(this.elements.captions);
                          var a = ne("span", oe(this.config.selectors.caption));
                          (a.innerHTML = i),
                            this.elements.captions.appendChild(a),
                            Te.call(this, this.media, "cuechange");
                        }
                      } else this.debug.warn("updateCues: Invalid input", e);
                    else this.debug.warn("No captions element to render to");
                },
              },
              Je = {
                enabled: !0,
                title: "",
                debug: !1,
                autoplay: !1,
                autopause: !0,
                playsinline: !0,
                seekTime: 10,
                volume: 1,
                muted: !1,
                duration: null,
                displayDuration: !0,
                invertTime: !0,
                toggleInvert: !0,
                ratio: null,
                clickToPlay: !0,
                hideControls: !0,
                resetOnEnd: !1,
                disableContextMenu: !0,
                loadSprite: !0,
                iconPrefix: "plyr",
                iconUrl: "https://cdn.plyr.io/3.7.2/plyr.svg",
                blankVideo: "https://cdn.plyr.io/static/blank.mp4",
                quality: {
                  default: 576,
                  options: [
                    4320, 2880, 2160, 1440, 1080, 720, 576, 480, 360, 240,
                  ],
                  forced: !1,
                  onChange: null,
                },
                loop: { active: !1 },
                speed: {
                  selected: 1,
                  options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 4],
                },
                keyboard: { focused: !0, global: !1 },
                tooltips: { controls: !1, seek: !0 },
                captions: { active: !1, language: "auto", update: !1 },
                fullscreen: { enabled: !0, fallback: !0, iosNative: !1 },
                storage: { enabled: !0, key: "plyr" },
                controls: [
                  "play-large",
                  "play",
                  "progress",
                  "current-time",
                  "mute",
                  "volume",
                  "captions",
                  "settings",
                  "pip",
                  "airplay",
                  "fullscreen",
                ],
                settings: ["captions", "quality", "speed"],
                i18n: {
                  restart: "Restart",
                  rewind: "Rewind {seektime}s",
                  play: "Play",
                  pause: "Pause",
                  fastForward: "Forward {seektime}s",
                  seek: "Seek",
                  seekLabel: "{currentTime} of {duration}",
                  played: "Played",
                  buffered: "Buffered",
                  currentTime: "Current time",
                  duration: "Duration",
                  volume: "Volume",
                  mute: "Mute",
                  unmute: "Unmute",
                  enableCaptions: "Enable captions",
                  disableCaptions: "Disable captions",
                  download: "Download",
                  enterFullscreen: "Enter fullscreen",
                  exitFullscreen: "Exit fullscreen",
                  frameTitle: "Player for {title}",
                  captions: "Captions",
                  settings: "Settings",
                  pip: "PIP",
                  menuBack: "Go back to previous menu",
                  speed: "Speed",
                  normal: "Normal",
                  quality: "Quality",
                  loop: "Loop",
                  start: "Start",
                  end: "End",
                  all: "All",
                  reset: "Reset",
                  disabled: "Disabled",
                  enabled: "Enabled",
                  advertisement: "Ad",
                  qualityBadge: {
                    2160: "4K",
                    1440: "HD",
                    1080: "HD",
                    720: "HD",
                    576: "SD",
                    480: "SD",
                  },
                },
                urls: {
                  download: null,
                  vimeo: {
                    sdk: "https://player.vimeo.com/api/player.js",
                    iframe: "https://player.vimeo.com/video/{0}?{1}",
                    api: "https://vimeo.com/api/oembed.json?url={0}",
                  },
                  youtube: {
                    sdk: "https://www.youtube.com/iframe_api",
                    api: "https://noembed.com/embed?url=https://www.youtube.com/watch?v={0}",
                  },
                  googleIMA: {
                    sdk: "https://imasdk.googleapis.com/js/sdkloader/ima3.js",
                  },
                },
                listeners: {
                  seek: null,
                  play: null,
                  pause: null,
                  restart: null,
                  rewind: null,
                  fastForward: null,
                  mute: null,
                  volume: null,
                  captions: null,
                  download: null,
                  fullscreen: null,
                  pip: null,
                  airplay: null,
                  speed: null,
                  quality: null,
                  loop: null,
                  language: null,
                },
                events: [
                  "ended",
                  "progress",
                  "stalled",
                  "playing",
                  "waiting",
                  "canplay",
                  "canplaythrough",
                  "loadstart",
                  "loadeddata",
                  "loadedmetadata",
                  "timeupdate",
                  "volumechange",
                  "play",
                  "pause",
                  "error",
                  "seeking",
                  "seeked",
                  "emptied",
                  "ratechange",
                  "cuechange",
                  "download",
                  "enterfullscreen",
                  "exitfullscreen",
                  "captionsenabled",
                  "captionsdisabled",
                  "languagechange",
                  "controlshidden",
                  "controlsshown",
                  "ready",
                  "statechange",
                  "qualitychange",
                  "adsloaded",
                  "adscontentpause",
                  "adscontentresume",
                  "adstarted",
                  "adsmidpoint",
                  "adscomplete",
                  "adsallcomplete",
                  "adsimpression",
                  "adsclick",
                ],
                selectors: {
                  editable: "input, textarea, select, [contenteditable]",
                  container: ".plyr",
                  controls: { container: null, wrapper: ".plyr__controls" },
                  labels: "[data-plyr]",
                  buttons: {
                    play: '[data-plyr="play"]',
                    pause: '[data-plyr="pause"]',
                    restart: '[data-plyr="restart"]',
                    rewind: '[data-plyr="rewind"]',
                    fastForward: '[data-plyr="fast-forward"]',
                    mute: '[data-plyr="mute"]',
                    captions: '[data-plyr="captions"]',
                    download: '[data-plyr="download"]',
                    fullscreen: '[data-plyr="fullscreen"]',
                    pip: '[data-plyr="pip"]',
                    airplay: '[data-plyr="airplay"]',
                    settings: '[data-plyr="settings"]',
                    loop: '[data-plyr="loop"]',
                  },
                  inputs: {
                    seek: '[data-plyr="seek"]',
                    volume: '[data-plyr="volume"]',
                    speed: '[data-plyr="speed"]',
                    language: '[data-plyr="language"]',
                    quality: '[data-plyr="quality"]',
                  },
                  display: {
                    currentTime: ".plyr__time--current",
                    duration: ".plyr__time--duration",
                    buffer: ".plyr__progress__buffer",
                    loop: ".plyr__progress__loop",
                    volume: ".plyr__volume--display",
                  },
                  progress: ".plyr__progress",
                  captions: ".plyr__captions",
                  caption: ".plyr__caption",
                },
                classNames: {
                  type: "plyr--{0}",
                  provider: "plyr--{0}",
                  video: "plyr__video-wrapper",
                  embed: "plyr__video-embed",
                  videoFixedRatio: "plyr__video-wrapper--fixed-ratio",
                  embedContainer: "plyr__video-embed__container",
                  poster: "plyr__poster",
                  posterEnabled: "plyr__poster-enabled",
                  ads: "plyr__ads",
                  control: "plyr__control",
                  controlPressed: "plyr__control--pressed",
                  playing: "plyr--playing",
                  paused: "plyr--paused",
                  stopped: "plyr--stopped",
                  loading: "plyr--loading",
                  hover: "plyr--hover",
                  tooltip: "plyr__tooltip",
                  cues: "plyr__cues",
                  marker: "plyr__progress__marker",
                  hidden: "plyr__sr-only",
                  hideControls: "plyr--hide-controls",
                  isIos: "plyr--is-ios",
                  isTouch: "plyr--is-touch",
                  uiSupported: "plyr--full-ui",
                  noTransition: "plyr--no-transition",
                  display: { time: "plyr__time" },
                  menu: {
                    value: "plyr__menu__value",
                    badge: "plyr__badge",
                    open: "plyr--menu-open",
                  },
                  captions: {
                    enabled: "plyr--captions-enabled",
                    active: "plyr--captions-active",
                  },
                  fullscreen: {
                    enabled: "plyr--fullscreen-enabled",
                    fallback: "plyr--fullscreen-fallback",
                  },
                  pip: {
                    supported: "plyr--pip-supported",
                    active: "plyr--pip-active",
                  },
                  airplay: {
                    supported: "plyr--airplay-supported",
                    active: "plyr--airplay-active",
                  },
                  tabFocus: "plyr__tab-focus",
                  previewThumbnails: {
                    thumbContainer: "plyr__preview-thumb",
                    thumbContainerShown: "plyr__preview-thumb--is-shown",
                    imageContainer: "plyr__preview-thumb__image-container",
                    timeContainer: "plyr__preview-thumb__time-container",
                    scrubbingContainer: "plyr__preview-scrubbing",
                    scrubbingContainerShown:
                      "plyr__preview-scrubbing--is-shown",
                  },
                },
                attributes: {
                  embed: {
                    provider: "data-plyr-provider",
                    id: "data-plyr-embed-id",
                    hash: "data-plyr-embed-hash",
                  },
                },
                ads: { enabled: !1, publisherId: "", tagUrl: "" },
                previewThumbnails: { enabled: !1, src: "" },
                vimeo: {
                  byline: !1,
                  portrait: !1,
                  title: !1,
                  speed: !0,
                  transparent: !1,
                  customControls: !0,
                  referrerPolicy: null,
                  premium: !1,
                },
                youtube: {
                  rel: 0,
                  showinfo: 0,
                  iv_load_policy: 3,
                  modestbranding: 1,
                  customControls: !0,
                  noCookie: !1,
                },
                mediaMetadata: {
                  title: "",
                  artist: "",
                  album: "",
                  artwork: [],
                },
                markers: { enabled: !1, points: [] },
              },
              Ge = "picture-in-picture",
              Ze = { html5: "html5", youtube: "youtube", vimeo: "vimeo" },
              et = "video",
              tt = function () {},
              nt = (function () {
                function e() {
                  var t =
                    arguments.length > 0 &&
                    void 0 !== arguments[0] &&
                    arguments[0];
                  r(this, e),
                    (this.enabled = window.console && t),
                    this.enabled && this.log("Debugging enabled");
                }
                return (
                  o(e, [
                    {
                      key: "log",
                      get: function () {
                        return this.enabled
                          ? Function.prototype.bind.call(console.log, console)
                          : tt;
                      },
                    },
                    {
                      key: "warn",
                      get: function () {
                        return this.enabled
                          ? Function.prototype.bind.call(console.warn, console)
                          : tt;
                      },
                    },
                    {
                      key: "error",
                      get: function () {
                        return this.enabled
                          ? Function.prototype.bind.call(console.error, console)
                          : tt;
                      },
                    },
                  ]),
                  e
                );
              })(),
              it = (function () {
                function t(n) {
                  var i = this;
                  r(this, t),
                    e(this, "onChange", function () {
                      if (i.enabled) {
                        var e = i.player.elements.buttons.fullscreen;
                        U(e) && (e.pressed = i.active);
                        var t =
                          i.target === i.player.media
                            ? i.target
                            : i.player.elements.container;
                        Te.call(
                          i.player,
                          t,
                          i.active ? "enterfullscreen" : "exitfullscreen",
                          !0
                        );
                      }
                    }),
                    e(this, "toggleFallback", function () {
                      var e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (
                        (e
                          ? (i.scrollPosition = {
                              x: window.scrollX || 0,
                              y: window.scrollY || 0,
                            })
                          : window.scrollTo(
                              i.scrollPosition.x,
                              i.scrollPosition.y
                            ),
                        (document.body.style.overflow = e ? "hidden" : ""),
                        ce(
                          i.target,
                          i.player.config.classNames.fullscreen.fallback,
                          e
                        ),
                        J.isIos)
                      ) {
                        var t = document.head.querySelector(
                            'meta[name="viewport"]'
                          ),
                          n = "viewport-fit=cover";
                        t ||
                          (t = document.createElement("meta")).setAttribute(
                            "name",
                            "viewport"
                          );
                        var a = H(t.content) && t.content.includes(n);
                        e
                          ? ((i.cleanupViewport = !a),
                            a || (t.content += ",".concat(n)))
                          : i.cleanupViewport &&
                            (t.content = t.content
                              .split(",")
                              .filter(function (e) {
                                return e.trim() !== n;
                              })
                              .join(","));
                      }
                      i.onChange();
                    }),
                    e(this, "trapFocus", function (e) {
                      if (!J.isIos && i.active && "Tab" === e.key) {
                        var t = document.activeElement,
                          n = he.call(
                            i.player,
                            "a[href], button:not(:disabled), input:not(:disabled), [tabindex]"
                          ),
                          a = d(n, 1)[0],
                          r = n[n.length - 1];
                        t !== r || e.shiftKey
                          ? t === a &&
                            e.shiftKey &&
                            (r.focus(), e.preventDefault())
                          : (a.focus(), e.preventDefault());
                      }
                    }),
                    e(this, "update", function () {
                      var e;
                      i.enabled
                        ? ((e = i.forceFallback
                            ? "Fallback (forced)"
                            : t.native
                            ? "Native"
                            : "Fallback"),
                          i.player.debug.log(
                            "".concat(e, " fullscreen enabled")
                          ))
                        : i.player.debug.log(
                            "Fullscreen not supported and fallback disabled"
                          ),
                        ce(
                          i.player.elements.container,
                          i.player.config.classNames.fullscreen.enabled,
                          i.enabled
                        );
                    }),
                    e(this, "enter", function () {
                      i.enabled &&
                        (J.isIos && i.player.config.fullscreen.iosNative
                          ? i.player.isVimeo
                            ? i.player.embed.requestFullscreen()
                            : i.target.webkitEnterFullscreen()
                          : !t.native || i.forceFallback
                          ? i.toggleFallback(!0)
                          : i.prefix
                          ? $(i.prefix) ||
                            i.target[
                              "".concat(i.prefix, "Request").concat(i.property)
                            ]()
                          : i.target.requestFullscreen({
                              navigationUI: "hide",
                            }));
                    }),
                    e(this, "exit", function () {
                      if (i.enabled)
                        if (J.isIos && i.player.config.fullscreen.iosNative)
                          i.target.webkitExitFullscreen(), Ce(i.player.play());
                        else if (!t.native || i.forceFallback)
                          i.toggleFallback(!1);
                        else if (i.prefix) {
                          if (!$(i.prefix)) {
                            var e = "moz" === i.prefix ? "Cancel" : "Exit";
                            document[
                              "".concat(i.prefix).concat(e).concat(i.property)
                            ]();
                          }
                        } else
                          (
                            document.cancelFullScreen || document.exitFullscreen
                          ).call(document);
                    }),
                    e(this, "toggle", function () {
                      i.active ? i.exit() : i.enter();
                    }),
                    (this.player = n),
                    (this.prefix = t.prefix),
                    (this.property = t.property),
                    (this.scrollPosition = { x: 0, y: 0 }),
                    (this.forceFallback =
                      "force" === n.config.fullscreen.fallback),
                    (this.player.elements.fullscreen =
                      n.config.fullscreen.container &&
                      (function (e, t) {
                        return (
                          Element.prototype.closest ||
                          function () {
                            var e = this;
                            do {
                              if (de.matches(e, t)) return e;
                              e = e.parentElement || e.parentNode;
                            } while (null !== e && 1 === e.nodeType);
                            return null;
                          }
                        ).call(e, t);
                      })(
                        this.player.elements.container,
                        n.config.fullscreen.container
                      )),
                    be.call(
                      this.player,
                      document,
                      "ms" === this.prefix
                        ? "MSFullscreenChange"
                        : "".concat(this.prefix, "fullscreenchange"),
                      function () {
                        i.onChange();
                      }
                    ),
                    be.call(
                      this.player,
                      this.player.elements.container,
                      "dblclick",
                      function (e) {
                        (U(i.player.elements.controls) &&
                          i.player.elements.controls.contains(e.target)) ||
                          i.player.listeners.proxy(e, i.toggle, "fullscreen");
                      }
                    ),
                    be.call(
                      this,
                      this.player.elements.container,
                      "keydown",
                      function (e) {
                        return i.trapFocus(e);
                      }
                    ),
                    this.update();
                }
                return (
                  o(
                    t,
                    [
                      {
                        key: "usingNative",
                        get: function () {
                          return t.native && !this.forceFallback;
                        },
                      },
                      {
                        key: "enabled",
                        get: function () {
                          return (
                            (t.native ||
                              this.player.config.fullscreen.fallback) &&
                            this.player.config.fullscreen.enabled &&
                            this.player.supported.ui &&
                            this.player.isVideo
                          );
                        },
                      },
                      {
                        key: "active",
                        get: function () {
                          if (!this.enabled) return !1;
                          if (!t.native || this.forceFallback)
                            return ue(
                              this.target,
                              this.player.config.classNames.fullscreen.fallback
                            );
                          var e = this.prefix
                            ? this.target.getRootNode()[
                                ""
                                  .concat(this.prefix)
                                  .concat(this.property, "Element")
                              ]
                            : this.target.getRootNode().fullscreenElement;
                          return e && e.shadowRoot
                            ? e === this.target.getRootNode().host
                            : e === this.target;
                        },
                      },
                      {
                        key: "target",
                        get: function () {
                          return J.isIos &&
                            this.player.config.fullscreen.iosNative
                            ? this.player.media
                            : this.player.elements.fullscreen ||
                                this.player.elements.container;
                        },
                      },
                    ],
                    [
                      {
                        key: "native",
                        get: function () {
                          return !!(
                            document.fullscreenEnabled ||
                            document.webkitFullscreenEnabled ||
                            document.mozFullScreenEnabled ||
                            document.msFullscreenEnabled
                          );
                        },
                      },
                      {
                        key: "prefix",
                        get: function () {
                          if (R(document.exitFullscreen)) return "";
                          var e = "";
                          return (
                            ["webkit", "moz", "ms"].some(function (t) {
                              return !(
                                (!R(document["".concat(t, "ExitFullscreen")]) &&
                                  !R(
                                    document["".concat(t, "CancelFullScreen")]
                                  )) ||
                                ((e = t), 0)
                              );
                            }),
                            e
                          );
                        },
                      },
                      {
                        key: "property",
                        get: function () {
                          return "moz" === this.prefix
                            ? "FullScreen"
                            : "Fullscreen";
                        },
                      },
                    ]
                  ),
                  t
                );
              })();
            function at(e) {
              var t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 1;
              return new Promise(function (n, i) {
                var a = new Image(),
                  r = function () {
                    delete a.onload,
                      delete a.onerror,
                      (a.naturalWidth >= t ? n : i)(a);
                  };
                Object.assign(a, { onload: r, onerror: r, src: e });
              });
            }
            var rt = {
                addStyleHook() {
                  ce(
                    this.elements.container,
                    this.config.selectors.container.replace(".", ""),
                    !0
                  ),
                    ce(
                      this.elements.container,
                      this.config.classNames.uiSupported,
                      this.supported.ui
                    );
                },
                toggleNativeControls() {
                  arguments.length > 0 &&
                  void 0 !== arguments[0] &&
                  arguments[0] &&
                  this.isHTML5
                    ? this.media.setAttribute("controls", "")
                    : this.media.removeAttribute("controls");
                },
                build() {
                  var e = this;
                  if ((this.listeners.media(), !this.supported.ui))
                    return (
                      this.debug.warn(
                        "Basic support only for "
                          .concat(this.provider, " ")
                          .concat(this.type)
                      ),
                      void rt.toggleNativeControls.call(this, !0)
                    );
                  U(this.elements.controls) ||
                    (Ye.inject.call(this), this.listeners.controls()),
                    rt.toggleNativeControls.call(this),
                    this.isHTML5 && Xe.setup.call(this),
                    (this.volume = null),
                    (this.muted = null),
                    (this.loop = null),
                    (this.quality = null),
                    (this.speed = null),
                    Ye.updateVolume.call(this),
                    Ye.timeUpdate.call(this),
                    Ye.durationUpdate.call(this),
                    rt.checkPlaying.call(this),
                    ce(
                      this.elements.container,
                      this.config.classNames.pip.supported,
                      ge.pip && this.isHTML5 && this.isVideo
                    ),
                    ce(
                      this.elements.container,
                      this.config.classNames.airplay.supported,
                      ge.airplay && this.isHTML5
                    ),
                    ce(
                      this.elements.container,
                      this.config.classNames.isIos,
                      J.isIos
                    ),
                    ce(
                      this.elements.container,
                      this.config.classNames.isTouch,
                      this.touch
                    ),
                    (this.ready = !0),
                    setTimeout(function () {
                      Te.call(e, e.media, "ready");
                    }, 0),
                    rt.setTitle.call(this),
                    this.poster &&
                      rt.setPoster
                        .call(this, this.poster, !1)
                        .catch(function () {}),
                    this.config.duration && Ye.durationUpdate.call(this),
                    this.config.mediaMetadata && Ye.setMediaMetadata.call(this);
                },
                setTitle() {
                  var e = Ve.get("play", this.config);
                  if (
                    (H(this.config.title) &&
                      !$(this.config.title) &&
                      (e += ", ".concat(this.config.title)),
                    Array.from(this.elements.buttons.play || []).forEach(
                      function (t) {
                        t.setAttribute("aria-label", e);
                      }
                    ),
                    this.isEmbed)
                  ) {
                    var t = pe.call(this, "iframe");
                    if (!U(t)) return;
                    var n = $(this.config.title) ? "video" : this.config.title,
                      i = Ve.get("frameTitle", this.config);
                    t.setAttribute("title", i.replace("{title}", n));
                  }
                },
                togglePoster(e) {
                  ce(
                    this.elements.container,
                    this.config.classNames.posterEnabled,
                    e
                  );
                },
                setPoster(e) {
                  var t = this;
                  return (arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    !arguments[1]) ||
                    !this.poster
                    ? (this.media.setAttribute("data-poster", e),
                      this.elements.poster.removeAttribute("hidden"),
                      Ae.call(this)
                        .then(function () {
                          return at(e);
                        })
                        .catch(function (n) {
                          throw (
                            (e === t.poster && rt.togglePoster.call(t, !1), n)
                          );
                        })
                        .then(function () {
                          if (e !== t.poster)
                            throw new Error(
                              "setPoster cancelled by later call to setPoster"
                            );
                        })
                        .then(function () {
                          return (
                            Object.assign(t.elements.poster.style, {
                              backgroundImage: "url('".concat(e, "')"),
                              backgroundSize: "",
                            }),
                            rt.togglePoster.call(t, !0),
                            e
                          );
                        }))
                    : Promise.reject(new Error("Poster already set"));
                },
                checkPlaying(e) {
                  var t = this;
                  ce(
                    this.elements.container,
                    this.config.classNames.playing,
                    this.playing
                  ),
                    ce(
                      this.elements.container,
                      this.config.classNames.paused,
                      this.paused
                    ),
                    ce(
                      this.elements.container,
                      this.config.classNames.stopped,
                      this.stopped
                    ),
                    Array.from(this.elements.buttons.play || []).forEach(
                      function (e) {
                        Object.assign(e, { pressed: t.playing }),
                          e.setAttribute(
                            "aria-label",
                            Ve.get(t.playing ? "pause" : "play", t.config)
                          );
                      }
                    ),
                    (W(e) && "timeupdate" === e.type) ||
                      rt.toggleControls.call(this);
                },
                checkLoading(e) {
                  var t = this;
                  (this.loading = ["stalled", "waiting"].includes(e.type)),
                    clearTimeout(this.timers.loading),
                    (this.timers.loading = setTimeout(
                      function () {
                        ce(
                          t.elements.container,
                          t.config.classNames.loading,
                          t.loading
                        ),
                          rt.toggleControls.call(t);
                      },
                      this.loading ? 250 : 0
                    ));
                },
                toggleControls(e) {
                  var t = this.elements.controls;
                  if (t && this.config.hideControls) {
                    var n = this.touch && this.lastSeekTime + 2e3 > Date.now();
                    this.toggleControls(
                      Boolean(
                        e ||
                          this.loading ||
                          this.paused ||
                          t.pressed ||
                          t.hover ||
                          n
                      )
                    );
                  }
                },
                migrateStyles() {
                  var e = this;
                  Object.values(c({}, this.media.style))
                    .filter(function (e) {
                      return !$(e) && H(e) && e.startsWith("--plyr");
                    })
                    .forEach(function (t) {
                      e.elements.container.style.setProperty(
                        t,
                        e.media.style.getPropertyValue(t)
                      ),
                        e.media.style.removeProperty(t);
                    }),
                    $(this.media.style) && this.media.removeAttribute("style");
                },
              },
              st = (function () {
                function t(n) {
                  var i = this;
                  r(this, t),
                    e(this, "firstTouch", function () {
                      var e = i.player,
                        t = e.elements;
                      (e.touch = !0),
                        ce(t.container, e.config.classNames.isTouch, !0);
                    }),
                    e(this, "setTabFocus", function (e) {
                      var t = i.player,
                        n = t.elements,
                        a = e.key,
                        r = e.type,
                        s = e.timeStamp;
                      if (
                        (clearTimeout(i.focusTimer),
                        "keydown" !== r || "Tab" === a)
                      ) {
                        "keydown" === r && (i.lastKeyDown = s);
                        var o = s - i.lastKeyDown <= 20;
                        ("focus" !== r || o) &&
                          ((function () {
                            var e = t.config.classNames.tabFocus;
                            ce(he.call(t, ".".concat(e)), e, !1);
                          })(),
                          "focusout" !== r &&
                            (i.focusTimer = setTimeout(function () {
                              var e = document.activeElement;
                              n.container.contains(e) &&
                                ce(
                                  document.activeElement,
                                  t.config.classNames.tabFocus,
                                  !0
                                );
                            }, 10)));
                      }
                    }),
                    e(this, "global", function () {
                      var e =
                          !(arguments.length > 0 && void 0 !== arguments[0]) ||
                          arguments[0],
                        t = i.player;
                      t.config.keyboard.global &&
                        ve.call(t, window, "keydown keyup", i.handleKey, e, !1),
                        ve.call(t, document.body, "click", i.toggleMenu, e),
                        ke.call(t, document.body, "touchstart", i.firstTouch),
                        ve.call(
                          t,
                          document.body,
                          "keydown focus blur focusout",
                          i.setTabFocus,
                          e,
                          !1,
                          !0
                        );
                    }),
                    e(this, "container", function () {
                      var e = i.player,
                        t = e.config,
                        n = e.elements,
                        a = e.timers;
                      !t.keyboard.global &&
                        t.keyboard.focused &&
                        be.call(
                          e,
                          n.container,
                          "keydown keyup",
                          i.handleKey,
                          !1
                        ),
                        be.call(
                          e,
                          n.container,
                          "mousemove mouseleave touchstart touchmove enterfullscreen exitfullscreen",
                          function (t) {
                            var i = n.controls;
                            i &&
                              "enterfullscreen" === t.type &&
                              ((i.pressed = !1), (i.hover = !1));
                            var r = 0;
                            ["touchstart", "touchmove", "mousemove"].includes(
                              t.type
                            ) &&
                              (rt.toggleControls.call(e, !0),
                              (r = e.touch ? 3e3 : 2e3)),
                              clearTimeout(a.controls),
                              (a.controls = setTimeout(function () {
                                return rt.toggleControls.call(e, !1);
                              }, r));
                          }
                        );
                      var r = function () {
                          if (e.isVimeo && !e.config.vimeo.premium) {
                            var t = n.wrapper,
                              i = e.fullscreen.active,
                              a = d(Ne.call(e), 2),
                              r = a[0],
                              s = a[1],
                              o = Me(
                                "aspect-ratio: ".concat(r, " / ").concat(s)
                              );
                            if (i) {
                              var l = [
                                  Math.max(
                                    document.documentElement.clientWidth || 0,
                                    window.innerWidth || 0
                                  ),
                                  Math.max(
                                    document.documentElement.clientHeight || 0,
                                    window.innerHeight || 0
                                  ),
                                ],
                                c = l[1],
                                u = l[0] / c > r / s;
                              o
                                ? ((t.style.width = u ? "auto" : "100%"),
                                  (t.style.height = u ? "100%" : "auto"))
                                : ((t.style.maxWidth = u
                                    ? (c / s) * r + "px"
                                    : null),
                                  (t.style.margin = u ? "0 auto" : null));
                            } else
                              o
                                ? ((t.style.width = null),
                                  (t.style.height = null))
                                : ((t.style.maxWidth = null),
                                  (t.style.margin = null));
                          }
                        },
                        s = function () {
                          clearTimeout(a.resized),
                            (a.resized = setTimeout(r, 50));
                        };
                      be.call(
                        e,
                        n.container,
                        "enterfullscreen exitfullscreen",
                        function (t) {
                          e.fullscreen.target === n.container &&
                            ((!e.isEmbed && $(e.config.ratio)) ||
                              (r(),
                              ("enterfullscreen" === t.type ? be : we).call(
                                e,
                                window,
                                "resize",
                                s
                              )));
                        }
                      );
                    }),
                    e(this, "media", function () {
                      var e = i.player,
                        t = e.elements;
                      if (
                        (be.call(
                          e,
                          e.media,
                          "timeupdate seeking seeked",
                          function (t) {
                            return Ye.timeUpdate.call(e, t);
                          }
                        ),
                        be.call(
                          e,
                          e.media,
                          "durationchange loadeddata loadedmetadata",
                          function (t) {
                            return Ye.durationUpdate.call(e, t);
                          }
                        ),
                        be.call(e, e.media, "ended", function () {
                          e.isHTML5 &&
                            e.isVideo &&
                            e.config.resetOnEnd &&
                            (e.restart(), e.pause());
                        }),
                        be.call(
                          e,
                          e.media,
                          "progress playing seeking seeked",
                          function (t) {
                            return Ye.updateProgress.call(e, t);
                          }
                        ),
                        be.call(e, e.media, "volumechange", function (t) {
                          return Ye.updateVolume.call(e, t);
                        }),
                        be.call(
                          e,
                          e.media,
                          "playing play pause ended emptied timeupdate",
                          function (t) {
                            return rt.checkPlaying.call(e, t);
                          }
                        ),
                        be.call(
                          e,
                          e.media,
                          "waiting canplay seeked playing",
                          function (t) {
                            return rt.checkLoading.call(e, t);
                          }
                        ),
                        e.supported.ui && e.config.clickToPlay && !e.isAudio)
                      ) {
                        var n = pe.call(
                          e,
                          ".".concat(e.config.classNames.video)
                        );
                        if (!U(n)) return;
                        be.call(e, t.container, "click", function (a) {
                          ([t.container, n].includes(a.target) ||
                            n.contains(a.target)) &&
                            ((e.touch && e.config.hideControls) ||
                              (e.ended
                                ? (i.proxy(a, e.restart, "restart"),
                                  i.proxy(
                                    a,
                                    function () {
                                      Ce(e.play());
                                    },
                                    "play"
                                  ))
                                : i.proxy(
                                    a,
                                    function () {
                                      Ce(e.togglePlay());
                                    },
                                    "play"
                                  )));
                        });
                      }
                      e.supported.ui &&
                        e.config.disableContextMenu &&
                        be.call(
                          e,
                          t.wrapper,
                          "contextmenu",
                          function (e) {
                            e.preventDefault();
                          },
                          !1
                        ),
                        be.call(e, e.media, "volumechange", function () {
                          e.storage.set({ volume: e.volume, muted: e.muted });
                        }),
                        be.call(e, e.media, "ratechange", function () {
                          Ye.updateSetting.call(e, "speed"),
                            e.storage.set({ speed: e.speed });
                        }),
                        be.call(e, e.media, "qualitychange", function (t) {
                          Ye.updateSetting.call(
                            e,
                            "quality",
                            null,
                            t.detail.quality
                          );
                        }),
                        be.call(e, e.media, "ready qualitychange", function () {
                          Ye.setDownloadUrl.call(e);
                        });
                      var a = e.config.events
                        .concat(["keyup", "keydown"])
                        .join(" ");
                      be.call(e, e.media, a, function (n) {
                        var i = n.detail,
                          a = void 0 === i ? {} : i;
                        "error" === n.type && (a = e.media.error),
                          Te.call(e, t.container, n.type, !0, a);
                      });
                    }),
                    e(this, "proxy", function (e, t, n) {
                      var a = i.player,
                        r = a.config.listeners[n],
                        s = !0;
                      R(r) && (s = r.call(a, e)),
                        !1 !== s && R(t) && t.call(a, e);
                    }),
                    e(this, "bind", function (e, t, n, a) {
                      var r =
                          !(arguments.length > 4 && void 0 !== arguments[4]) ||
                          arguments[4],
                        s = i.player,
                        o = s.config.listeners[a],
                        l = R(o);
                      be.call(
                        s,
                        e,
                        t,
                        function (e) {
                          return i.proxy(e, n, a);
                        },
                        r && !l
                      );
                    }),
                    e(this, "controls", function () {
                      var e = i.player,
                        t = e.elements,
                        n = J.isIE ? "change" : "input";
                      if (
                        (t.buttons.play &&
                          Array.from(t.buttons.play).forEach(function (t) {
                            i.bind(
                              t,
                              "click",
                              function () {
                                Ce(e.togglePlay());
                              },
                              "play"
                            );
                          }),
                        i.bind(
                          t.buttons.restart,
                          "click",
                          e.restart,
                          "restart"
                        ),
                        i.bind(
                          t.buttons.rewind,
                          "click",
                          function () {
                            (e.lastSeekTime = Date.now()), e.rewind();
                          },
                          "rewind"
                        ),
                        i.bind(
                          t.buttons.fastForward,
                          "click",
                          function () {
                            (e.lastSeekTime = Date.now()), e.forward();
                          },
                          "fastForward"
                        ),
                        i.bind(
                          t.buttons.mute,
                          "click",
                          function () {
                            e.muted = !e.muted;
                          },
                          "mute"
                        ),
                        i.bind(t.buttons.captions, "click", function () {
                          return e.toggleCaptions();
                        }),
                        i.bind(
                          t.buttons.download,
                          "click",
                          function () {
                            Te.call(e, e.media, "download");
                          },
                          "download"
                        ),
                        i.bind(
                          t.buttons.fullscreen,
                          "click",
                          function () {
                            e.fullscreen.toggle();
                          },
                          "fullscreen"
                        ),
                        i.bind(
                          t.buttons.pip,
                          "click",
                          function () {
                            e.pip = "toggle";
                          },
                          "pip"
                        ),
                        i.bind(
                          t.buttons.airplay,
                          "click",
                          e.airplay,
                          "airplay"
                        ),
                        i.bind(
                          t.buttons.settings,
                          "click",
                          function (t) {
                            t.stopPropagation(),
                              t.preventDefault(),
                              Ye.toggleMenu.call(e, t);
                          },
                          null,
                          !1
                        ),
                        i.bind(
                          t.buttons.settings,
                          "keyup",
                          function (t) {
                            ["Space", "Enter"].includes(t.key) &&
                              ("Enter" !== t.key
                                ? (t.preventDefault(),
                                  t.stopPropagation(),
                                  Ye.toggleMenu.call(e, t))
                                : Ye.focusFirstMenuItem.call(e, null, !0));
                          },
                          null,
                          !1
                        ),
                        i.bind(t.settings.menu, "keydown", function (t) {
                          "Escape" === t.key && Ye.toggleMenu.call(e, t);
                        }),
                        i.bind(
                          t.inputs.seek,
                          "mousedown mousemove",
                          function (e) {
                            var n = t.progress.getBoundingClientRect(),
                              i = (100 / n.width) * (e.pageX - n.left);
                            e.currentTarget.setAttribute("seek-value", i);
                          }
                        ),
                        i.bind(
                          t.inputs.seek,
                          "mousedown mouseup keydown keyup touchstart touchend",
                          function (t) {
                            var n = t.currentTarget,
                              i = "play-on-seeked";
                            if (
                              !z(t) ||
                              ["ArrowLeft", "ArrowRight"].includes(t.key)
                            ) {
                              e.lastSeekTime = Date.now();
                              var a = n.hasAttribute(i),
                                r = ["mouseup", "touchend", "keyup"].includes(
                                  t.type
                                );
                              a && r
                                ? (n.removeAttribute(i), Ce(e.play()))
                                : !r &&
                                  e.playing &&
                                  (n.setAttribute(i, ""), e.pause());
                            }
                          }
                        ),
                        J.isIos)
                      ) {
                        var a = he.call(e, 'input[type="range"]');
                        Array.from(a).forEach(function (e) {
                          return i.bind(e, n, function (e) {
                            return X(e.target);
                          });
                        });
                      }
                      i.bind(
                        t.inputs.seek,
                        n,
                        function (t) {
                          var n = t.currentTarget,
                            i = n.getAttribute("seek-value");
                          $(i) && (i = n.value),
                            n.removeAttribute("seek-value"),
                            (e.currentTime = (i / n.max) * e.duration);
                        },
                        "seek"
                      ),
                        i.bind(
                          t.progress,
                          "mouseenter mouseleave mousemove",
                          function (t) {
                            return Ye.updateSeekTooltip.call(e, t);
                          }
                        ),
                        i.bind(t.progress, "mousemove touchmove", function (t) {
                          var n = e.previewThumbnails;
                          n && n.loaded && n.startMove(t);
                        }),
                        i.bind(
                          t.progress,
                          "mouseleave touchend click",
                          function () {
                            var t = e.previewThumbnails;
                            t && t.loaded && t.endMove(!1, !0);
                          }
                        ),
                        i.bind(
                          t.progress,
                          "mousedown touchstart",
                          function (t) {
                            var n = e.previewThumbnails;
                            n && n.loaded && n.startScrubbing(t);
                          }
                        ),
                        i.bind(t.progress, "mouseup touchend", function (t) {
                          var n = e.previewThumbnails;
                          n && n.loaded && n.endScrubbing(t);
                        }),
                        J.isWebkit &&
                          Array.from(he.call(e, 'input[type="range"]')).forEach(
                            function (t) {
                              i.bind(t, "input", function (t) {
                                return Ye.updateRangeFill.call(e, t.target);
                              });
                            }
                          ),
                        e.config.toggleInvert &&
                          !U(t.display.duration) &&
                          i.bind(t.display.currentTime, "click", function () {
                            0 !== e.currentTime &&
                              ((e.config.invertTime = !e.config.invertTime),
                              Ye.timeUpdate.call(e));
                          }),
                        i.bind(
                          t.inputs.volume,
                          n,
                          function (t) {
                            e.volume = t.target.value;
                          },
                          "volume"
                        ),
                        i.bind(
                          t.controls,
                          "mouseenter mouseleave",
                          function (n) {
                            t.controls.hover =
                              !e.touch && "mouseenter" === n.type;
                          }
                        ),
                        t.fullscreen &&
                          Array.from(t.fullscreen.children)
                            .filter(function (e) {
                              return !e.contains(t.container);
                            })
                            .forEach(function (n) {
                              i.bind(n, "mouseenter mouseleave", function (n) {
                                t.controls &&
                                  (t.controls.hover =
                                    !e.touch && "mouseenter" === n.type);
                              });
                            }),
                        i.bind(
                          t.controls,
                          "mousedown mouseup touchstart touchend touchcancel",
                          function (e) {
                            t.controls.pressed = [
                              "mousedown",
                              "touchstart",
                            ].includes(e.type);
                          }
                        ),
                        i.bind(t.controls, "focusin", function () {
                          var n = e.config,
                            a = e.timers;
                          ce(t.controls, n.classNames.noTransition, !0),
                            rt.toggleControls.call(e, !0),
                            setTimeout(function () {
                              ce(t.controls, n.classNames.noTransition, !1);
                            }, 0);
                          var r = i.touch ? 3e3 : 4e3;
                          clearTimeout(a.controls),
                            (a.controls = setTimeout(function () {
                              return rt.toggleControls.call(e, !1);
                            }, r));
                        }),
                        i.bind(
                          t.inputs.volume,
                          "wheel",
                          function (t) {
                            var n = t.webkitDirectionInvertedFromDevice,
                              i = [t.deltaX, -t.deltaY].map(function (e) {
                                return n ? -e : e;
                              }),
                              a = d(i, 2),
                              r = a[0],
                              s = a[1],
                              o = Math.sign(Math.abs(r) > Math.abs(s) ? r : s);
                            e.increaseVolume(o / 50);
                            var l = e.media.volume;
                            ((1 === o && l < 1) || (-1 === o && l > 0)) &&
                              t.preventDefault();
                          },
                          "volume",
                          !1
                        );
                    }),
                    (this.player = n),
                    (this.lastKey = null),
                    (this.focusTimer = null),
                    (this.lastKeyDown = null),
                    (this.handleKey = this.handleKey.bind(this)),
                    (this.toggleMenu = this.toggleMenu.bind(this)),
                    (this.setTabFocus = this.setTabFocus.bind(this)),
                    (this.firstTouch = this.firstTouch.bind(this));
                }
                return (
                  o(t, [
                    {
                      key: "handleKey",
                      value: function (e) {
                        var t,
                          n = this.player,
                          i = n.elements,
                          a = e.key,
                          r = e.type,
                          s = e.altKey,
                          o = e.ctrlKey,
                          l = e.metaKey,
                          c = e.shiftKey,
                          u = "keydown" === r,
                          d = u && a === this.lastKey;
                        if (!(s || o || l || c) && a)
                          if (u) {
                            var h = document.activeElement;
                            if (U(h)) {
                              var p = n.config.selectors.editable;
                              if (h !== i.inputs.seek && de(h, p)) return;
                              if (
                                "Space" === e.key &&
                                de(h, 'button, [role^="menuitem"]')
                              )
                                return;
                            }
                            switch (
                              ([
                                "Space",
                                "ArrowLeft",
                                "ArrowUp",
                                "ArrowRight",
                                "ArrowDown",
                                "0",
                                "1",
                                "2",
                                "3",
                                "4",
                                "5",
                                "6",
                                "7",
                                "8",
                                "9",
                                "c",
                                "f",
                                "k",
                                "l",
                                "m",
                              ].includes(a) &&
                                (e.preventDefault(), e.stopPropagation()),
                              a)
                            ) {
                              case "0":
                              case "1":
                              case "2":
                              case "3":
                              case "4":
                              case "5":
                              case "6":
                              case "7":
                              case "8":
                              case "9":
                                d ||
                                  ((t = parseInt(a, 10)),
                                  (n.currentTime = (n.duration / 10) * t));
                                break;
                              case "Space":
                              case "k":
                                d || Ce(n.togglePlay());
                                break;
                              case "ArrowUp":
                                n.increaseVolume(0.1);
                                break;
                              case "ArrowDown":
                                n.decreaseVolume(0.1);
                                break;
                              case "m":
                                d || (n.muted = !n.muted);
                                break;
                              case "ArrowRight":
                                n.forward();
                                break;
                              case "ArrowLeft":
                                n.rewind();
                                break;
                              case "f":
                                n.fullscreen.toggle();
                                break;
                              case "c":
                                d || n.toggleCaptions();
                                break;
                              case "l":
                                n.loop = !n.loop;
                            }
                            "Escape" === a &&
                              !n.fullscreen.usingNative &&
                              n.fullscreen.active &&
                              n.fullscreen.toggle(),
                              (this.lastKey = a);
                          } else this.lastKey = null;
                      },
                    },
                    {
                      key: "toggleMenu",
                      value: function (e) {
                        Ye.toggleMenu.call(this.player, e);
                      },
                    },
                  ]),
                  t
                );
              })();
            "undefined" != typeof globalThis
              ? globalThis
              : "undefined" != typeof window
              ? window
              : void 0 !== n.g
              ? n.g
              : "undefined" != typeof self && self;
            var ot = (function (e, t) {
              return (
                (function (e, t) {
                  e.exports = (function () {
                    var e = function () {},
                      t = {},
                      n = {},
                      i = {};
                    function a(e, t) {
                      e = e.push ? e : [e];
                      var a,
                        r,
                        s,
                        o = [],
                        l = e.length,
                        c = l;
                      for (
                        a = function (e, n) {
                          n.length && o.push(e), --c || t(o);
                        };
                        l--;

                      )
                        (r = e[l]),
                          (s = n[r]) ? a(r, s) : (i[r] = i[r] || []).push(a);
                    }
                    function r(e, t) {
                      if (e) {
                        var a = i[e];
                        if (((n[e] = t), a))
                          for (; a.length; ) a[0](e, t), a.splice(0, 1);
                      }
                    }
                    function s(t, n) {
                      t.call && (t = { success: t }),
                        n.length ? (t.error || e)(n) : (t.success || e)(t);
                    }
                    function o(t, n, i, a) {
                      var r,
                        s,
                        l = document,
                        c = i.async,
                        u = (i.numRetries || 0) + 1,
                        d = i.before || e,
                        h = t.replace(/[\?|#].*$/, ""),
                        p = t.replace(/^(css|img)!/, "");
                      (a = a || 0),
                        /(^css!|\.css$)/.test(h)
                          ? (((s = l.createElement("link")).rel = "stylesheet"),
                            (s.href = p),
                            (r = "hideFocus" in s) &&
                              s.relList &&
                              ((r = 0), (s.rel = "preload"), (s.as = "style")))
                          : /(^img!|\.(png|gif|jpg|svg|webp)$)/.test(h)
                          ? ((s = l.createElement("img")).src = p)
                          : (((s = l.createElement("script")).src = t),
                            (s.async = void 0 === c || c)),
                        (s.onload =
                          s.onerror =
                          s.onbeforeload =
                            function (e) {
                              var l = e.type[0];
                              if (r)
                                try {
                                  s.sheet.cssText.length || (l = "e");
                                } catch (e) {
                                  18 != e.code && (l = "e");
                                }
                              if ("e" == l) {
                                if ((a += 1) < u) return o(t, n, i, a);
                              } else if ("preload" == s.rel && "style" == s.as)
                                return (s.rel = "stylesheet");
                              n(t, l, e.defaultPrevented);
                            }),
                        !1 !== d(t, s) && l.head.appendChild(s);
                    }
                    function l(e, t, n) {
                      var i,
                        a,
                        r = (e = e.push ? e : [e]).length,
                        s = r,
                        l = [];
                      for (
                        i = function (e, n, i) {
                          if (("e" == n && l.push(e), "b" == n)) {
                            if (!i) return;
                            l.push(e);
                          }
                          --r || t(l);
                        },
                          a = 0;
                        a < s;
                        a++
                      )
                        o(e[a], i, n);
                    }
                    function c(e, n, i) {
                      var a, o;
                      if (
                        (n && n.trim && (a = n), (o = (a ? i : n) || {}), a)
                      ) {
                        if (a in t) throw "LoadJS";
                        t[a] = !0;
                      }
                      function c(t, n) {
                        l(
                          e,
                          function (e) {
                            s(o, e),
                              t && s({ success: t, error: n }, e),
                              r(a, e);
                          },
                          o
                        );
                      }
                      if (o.returnPromise) return new Promise(c);
                      c();
                    }
                    return (
                      (c.ready = function (e, t) {
                        return (
                          a(e, function (e) {
                            s(t, e);
                          }),
                          c
                        );
                      }),
                      (c.done = function (e) {
                        r(e, []);
                      }),
                      (c.reset = function () {
                        (t = {}), (n = {}), (i = {});
                      }),
                      (c.isDefined = function (e) {
                        return e in t;
                      }),
                      c
                    );
                  })();
                })((t = { exports: {} })),
                t.exports
              );
            })();
            function lt(e) {
              return new Promise(function (t, n) {
                ot(e, { success: t, error: n });
              });
            }
            function ct(e) {
              e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0),
                this.media.paused === e &&
                  ((this.media.paused = !e),
                  Te.call(this, this.media, e ? "play" : "pause"));
            }
            var ut = {
              setup() {
                var e = this;
                ce(e.elements.wrapper, e.config.classNames.embed, !0),
                  (e.options.speed = e.config.speed.options),
                  Ie.call(e),
                  q(window.Vimeo)
                    ? ut.ready.call(e)
                    : lt(e.config.urls.vimeo.sdk)
                        .then(function () {
                          ut.ready.call(e);
                        })
                        .catch(function (t) {
                          e.debug.warn(
                            "Vimeo SDK (player.js) failed to load",
                            t
                          );
                        });
              },
              ready() {
                var e = this,
                  t = this,
                  n = t.config.vimeo,
                  a = n.premium,
                  r = n.referrerPolicy,
                  s = (function (e, t) {
                    if (null == e) return {};
                    var n,
                      i,
                      a = (function (e, t) {
                        if (null == e) return {};
                        var n,
                          i,
                          a = {},
                          r = Object.keys(e);
                        for (i = 0; i < r.length; i++)
                          (n = r[i]), t.indexOf(n) >= 0 || (a[n] = e[n]);
                        return a;
                      })(e, t);
                    if (Object.getOwnPropertySymbols) {
                      var r = Object.getOwnPropertySymbols(e);
                      for (i = 0; i < r.length; i++)
                        (n = r[i]),
                          t.indexOf(n) >= 0 ||
                            (Object.prototype.propertyIsEnumerable.call(e, n) &&
                              (a[n] = e[n]));
                    }
                    return a;
                  })(n, i),
                  o = t.media.getAttribute("src"),
                  l = "";
                $(o)
                  ? ((o = t.media.getAttribute(t.config.attributes.embed.id)),
                    (l = t.media.getAttribute(t.config.attributes.embed.hash)))
                  : (l = (function (e) {
                      var t = e.match(
                        /^.*(vimeo.com\/|video\/)(\d+)(\?.*&*h=|\/)+([\d,a-f]+)/
                      );
                      return t && 5 === t.length ? t[4] : null;
                    })(o));
                var u = l ? { h: l } : {};
                a && Object.assign(s, { controls: !1, sidedock: !1 });
                var h,
                  p = Qe(
                    c(
                      c(
                        {
                          loop: t.config.loop.active,
                          autoplay: t.autoplay,
                          muted: t.muted,
                          gesture: "media",
                          playsinline: !this.config.fullscreen.iosNative,
                        },
                        u
                      ),
                      s
                    )
                  ),
                  m = $((h = o))
                    ? null
                    : D(Number(h))
                    ? h
                    : h.match(/^.*(vimeo.com\/|video\/)(\d+).*/)
                    ? RegExp.$2
                    : h,
                  f = ne("iframe"),
                  g = qe(t.config.urls.vimeo.iframe, m, p);
                if (
                  (f.setAttribute("src", g),
                  f.setAttribute("allowfullscreen", ""),
                  f.setAttribute(
                    "allow",
                    [
                      "autoplay",
                      "fullscreen",
                      "picture-in-picture",
                      "encrypted-media",
                      "accelerometer",
                      "gyroscope",
                    ].join("; ")
                  ),
                  $(r) || f.setAttribute("referrerPolicy", r),
                  a || !n.customControls)
                )
                  f.setAttribute("data-poster", t.poster),
                    (t.media = se(f, t.media));
                else {
                  var y = ne("div", {
                    class: t.config.classNames.embedContainer,
                    "data-poster": t.poster,
                  });
                  y.appendChild(f), (t.media = se(y, t.media));
                }
                n.customControls ||
                  Ue(qe(t.config.urls.vimeo.api, g)).then(function (e) {
                    !$(e) &&
                      e.thumbnail_url &&
                      rt.setPoster
                        .call(t, e.thumbnail_url)
                        .catch(function () {});
                  }),
                  (t.embed = new window.Vimeo.Player(f, {
                    autopause: t.config.autopause,
                    muted: t.muted,
                  })),
                  (t.media.paused = !0),
                  (t.media.currentTime = 0),
                  t.supported.ui && t.embed.disableTextTrack(),
                  (t.media.play = function () {
                    return ct.call(t, !0), t.embed.play();
                  }),
                  (t.media.pause = function () {
                    return ct.call(t, !1), t.embed.pause();
                  }),
                  (t.media.stop = function () {
                    t.pause(), (t.currentTime = 0);
                  });
                var v = t.media.currentTime;
                Object.defineProperty(t.media, "currentTime", {
                  get: function () {
                    return v;
                  },
                  set(e) {
                    var n = t.embed,
                      i = t.media,
                      a = t.paused,
                      r = t.volume,
                      s = a && !n.hasPlayed;
                    (i.seeking = !0),
                      Te.call(t, i, "seeking"),
                      Promise.resolve(s && n.setVolume(0))
                        .then(function () {
                          return n.setCurrentTime(e);
                        })
                        .then(function () {
                          return s && n.pause();
                        })
                        .then(function () {
                          return s && n.setVolume(r);
                        })
                        .catch(function () {});
                  },
                });
                var b = t.config.speed.selected;
                Object.defineProperty(t.media, "playbackRate", {
                  get: function () {
                    return b;
                  },
                  set(e) {
                    t.embed
                      .setPlaybackRate(e)
                      .then(function () {
                        (b = e), Te.call(t, t.media, "ratechange");
                      })
                      .catch(function () {
                        t.options.speed = [1];
                      });
                  },
                });
                var w = t.config.volume;
                Object.defineProperty(t.media, "volume", {
                  get: function () {
                    return w;
                  },
                  set(e) {
                    t.embed.setVolume(e).then(function () {
                      (w = e), Te.call(t, t.media, "volumechange");
                    });
                  },
                });
                var k = t.config.muted;
                Object.defineProperty(t.media, "muted", {
                  get: function () {
                    return k;
                  },
                  set(e) {
                    var n = !!F(e) && e;
                    t.embed
                      .setVolume(n ? 0 : t.config.volume)
                      .then(function () {
                        (k = n), Te.call(t, t.media, "volumechange");
                      });
                  },
                });
                var T,
                  S = t.config.loop;
                Object.defineProperty(t.media, "loop", {
                  get: function () {
                    return S;
                  },
                  set(e) {
                    var n = F(e) ? e : t.config.loop.active;
                    t.embed.setLoop(n).then(function () {
                      S = n;
                    });
                  },
                }),
                  t.embed
                    .getVideoUrl()
                    .then(function (e) {
                      (T = e), Ye.setDownloadUrl.call(t);
                    })
                    .catch(function (t) {
                      e.debug.warn(t);
                    }),
                  Object.defineProperty(t.media, "currentSrc", {
                    get: function () {
                      return T;
                    },
                  }),
                  Object.defineProperty(t.media, "ended", {
                    get: function () {
                      return t.currentTime === t.duration;
                    },
                  }),
                  Promise.all([
                    t.embed.getVideoWidth(),
                    t.embed.getVideoHeight(),
                  ]).then(function (n) {
                    var i = d(n, 2),
                      a = i[0],
                      r = i[1];
                    (t.embed.ratio = _e(a, r)), Ie.call(e);
                  }),
                  t.embed.setAutopause(t.config.autopause).then(function (e) {
                    t.config.autopause = e;
                  }),
                  t.embed.getVideoTitle().then(function (n) {
                    (t.config.title = n), rt.setTitle.call(e);
                  }),
                  t.embed.getCurrentTime().then(function (e) {
                    (v = e), Te.call(t, t.media, "timeupdate");
                  }),
                  t.embed.getDuration().then(function (e) {
                    (t.media.duration = e),
                      Te.call(t, t.media, "durationchange");
                  }),
                  t.embed.getTextTracks().then(function (e) {
                    (t.media.textTracks = e), Xe.setup.call(t);
                  }),
                  t.embed.on("cuechange", function (e) {
                    var n = e.cues,
                      i = (void 0 === n ? [] : n).map(function (e) {
                        return (function (e) {
                          var t = document.createDocumentFragment(),
                            n = document.createElement("div");
                          return (
                            t.appendChild(n),
                            (n.innerHTML = e),
                            t.firstChild.innerText
                          );
                        })(e.text);
                      });
                    Xe.updateCues.call(t, i);
                  }),
                  t.embed.on("loaded", function () {
                    t.embed.getPaused().then(function (e) {
                      ct.call(t, !e), e || Te.call(t, t.media, "playing");
                    }),
                      U(t.embed.element) &&
                        t.supported.ui &&
                        t.embed.element.setAttribute("tabindex", -1);
                  }),
                  t.embed.on("bufferstart", function () {
                    Te.call(t, t.media, "waiting");
                  }),
                  t.embed.on("bufferend", function () {
                    Te.call(t, t.media, "playing");
                  }),
                  t.embed.on("play", function () {
                    ct.call(t, !0), Te.call(t, t.media, "playing");
                  }),
                  t.embed.on("pause", function () {
                    ct.call(t, !1);
                  }),
                  t.embed.on("timeupdate", function (e) {
                    (t.media.seeking = !1),
                      (v = e.seconds),
                      Te.call(t, t.media, "timeupdate");
                  }),
                  t.embed.on("progress", function (e) {
                    (t.media.buffered = e.percent),
                      Te.call(t, t.media, "progress"),
                      1 === parseInt(e.percent, 10) &&
                        Te.call(t, t.media, "canplaythrough"),
                      t.embed.getDuration().then(function (e) {
                        e !== t.media.duration &&
                          ((t.media.duration = e),
                          Te.call(t, t.media, "durationchange"));
                      });
                  }),
                  t.embed.on("seeked", function () {
                    (t.media.seeking = !1), Te.call(t, t.media, "seeked");
                  }),
                  t.embed.on("ended", function () {
                    (t.media.paused = !0), Te.call(t, t.media, "ended");
                  }),
                  t.embed.on("error", function (e) {
                    (t.media.error = e), Te.call(t, t.media, "error");
                  }),
                  n.customControls &&
                    setTimeout(function () {
                      return rt.build.call(t);
                    }, 0);
              },
            };
            function dt(e) {
              e && !this.embed.hasPlayed && (this.embed.hasPlayed = !0),
                this.media.paused === e &&
                  ((this.media.paused = !e),
                  Te.call(this, this.media, e ? "play" : "pause"));
            }
            function ht(e) {
              return e.noCookie
                ? "https://www.youtube-nocookie.com"
                : "http:" === window.location.protocol
                ? "http://www.youtube.com"
                : void 0;
            }
            var pt = {
                setup() {
                  var e = this;
                  if (
                    (ce(
                      this.elements.wrapper,
                      this.config.classNames.embed,
                      !0
                    ),
                    q(window.YT) && R(window.YT.Player))
                  )
                    pt.ready.call(this);
                  else {
                    var t = window.onYouTubeIframeAPIReady;
                    (window.onYouTubeIframeAPIReady = function () {
                      R(t) && t(), pt.ready.call(e);
                    }),
                      lt(this.config.urls.youtube.sdk).catch(function (t) {
                        e.debug.warn("YouTube API failed to load", t);
                      });
                  }
                },
                getTitle(e) {
                  var t = this;
                  Ue(qe(this.config.urls.youtube.api, e))
                    .then(function (e) {
                      if (q(e)) {
                        var n = e.title,
                          i = e.height,
                          a = e.width;
                        (t.config.title = n),
                          rt.setTitle.call(t),
                          (t.embed.ratio = _e(a, i));
                      }
                      Ie.call(t);
                    })
                    .catch(function () {
                      Ie.call(t);
                    });
                },
                ready() {
                  var e = this,
                    t = e.config.youtube,
                    n = e.media && e.media.getAttribute("id");
                  if ($(n) || !n.startsWith("youtube-")) {
                    var i = e.media.getAttribute("src");
                    $(i) &&
                      (i = e.media.getAttribute(
                        this.config.attributes.embed.id
                      ));
                    var a,
                      r = $((a = i))
                        ? null
                        : a.match(
                            /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/
                          )
                        ? RegExp.$2
                        : a,
                      s = ne("div", {
                        id: ""
                          .concat(e.provider, "-")
                          .concat(Math.floor(1e4 * Math.random())),
                        "data-poster": t.customControls ? e.poster : void 0,
                      });
                    if (((e.media = se(s, e.media)), t.customControls)) {
                      var o = function (e) {
                        return "https://i.ytimg.com/vi/"
                          .concat(r, "/")
                          .concat(e, "default.jpg");
                      };
                      at(o("maxres"), 121)
                        .catch(function () {
                          return at(o("sd"), 121);
                        })
                        .catch(function () {
                          return at(o("hq"));
                        })
                        .then(function (t) {
                          return rt.setPoster.call(e, t.src);
                        })
                        .then(function (t) {
                          t.includes("maxres") ||
                            (e.elements.poster.style.backgroundSize = "cover");
                        })
                        .catch(function () {});
                    }
                    e.embed = new window.YT.Player(e.media, {
                      videoId: r,
                      host: ht(t),
                      playerVars: Z(
                        {},
                        {
                          autoplay: e.config.autoplay ? 1 : 0,
                          hl: e.config.hl,
                          controls: e.supported.ui && t.customControls ? 0 : 1,
                          disablekb: 1,
                          playsinline: e.config.fullscreen.iosNative ? 0 : 1,
                          cc_load_policy: e.captions.active ? 1 : 0,
                          cc_lang_pref: e.config.captions.language,
                          widget_referrer: window ? window.location.href : null,
                        },
                        t
                      ),
                      events: {
                        onError(t) {
                          if (!e.media.error) {
                            var n = t.data,
                              i =
                                {
                                  2: "The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.",
                                  5: "The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.",
                                  100: "The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.",
                                  101: "The owner of the requested video does not allow it to be played in embedded players.",
                                  150: "The owner of the requested video does not allow it to be played in embedded players.",
                                }[n] || "An unknown error occured";
                            (e.media.error = { code: n, message: i }),
                              Te.call(e, e.media, "error");
                          }
                        },
                        onPlaybackRateChange(t) {
                          var n = t.target;
                          (e.media.playbackRate = n.getPlaybackRate()),
                            Te.call(e, e.media, "ratechange");
                        },
                        onReady(n) {
                          if (!R(e.media.play)) {
                            var i = n.target;
                            pt.getTitle.call(e, r),
                              (e.media.play = function () {
                                dt.call(e, !0), i.playVideo();
                              }),
                              (e.media.pause = function () {
                                dt.call(e, !1), i.pauseVideo();
                              }),
                              (e.media.stop = function () {
                                i.stopVideo();
                              }),
                              (e.media.duration = i.getDuration()),
                              (e.media.paused = !0),
                              (e.media.currentTime = 0),
                              Object.defineProperty(e.media, "currentTime", {
                                get: function () {
                                  return Number(i.getCurrentTime());
                                },
                                set(t) {
                                  e.paused &&
                                    !e.embed.hasPlayed &&
                                    e.embed.mute(),
                                    (e.media.seeking = !0),
                                    Te.call(e, e.media, "seeking"),
                                    i.seekTo(t);
                                },
                              }),
                              Object.defineProperty(e.media, "playbackRate", {
                                get: function () {
                                  return i.getPlaybackRate();
                                },
                                set(e) {
                                  i.setPlaybackRate(e);
                                },
                              });
                            var a = e.config.volume;
                            Object.defineProperty(e.media, "volume", {
                              get: function () {
                                return a;
                              },
                              set(t) {
                                (a = t),
                                  i.setVolume(100 * a),
                                  Te.call(e, e.media, "volumechange");
                              },
                            });
                            var s = e.config.muted;
                            Object.defineProperty(e.media, "muted", {
                              get: function () {
                                return s;
                              },
                              set(t) {
                                var n = F(t) ? t : s;
                                (s = n),
                                  i[n ? "mute" : "unMute"](),
                                  i.setVolume(100 * a),
                                  Te.call(e, e.media, "volumechange");
                              },
                            }),
                              Object.defineProperty(e.media, "currentSrc", {
                                get: function () {
                                  return i.getVideoUrl();
                                },
                              }),
                              Object.defineProperty(e.media, "ended", {
                                get: function () {
                                  return e.currentTime === e.duration;
                                },
                              });
                            var o = i.getAvailablePlaybackRates();
                            (e.options.speed = o.filter(function (t) {
                              return e.config.speed.options.includes(t);
                            })),
                              e.supported.ui &&
                                t.customControls &&
                                e.media.setAttribute("tabindex", -1),
                              Te.call(e, e.media, "timeupdate"),
                              Te.call(e, e.media, "durationchange"),
                              clearInterval(e.timers.buffering),
                              (e.timers.buffering = setInterval(function () {
                                (e.media.buffered = i.getVideoLoadedFraction()),
                                  (null === e.media.lastBuffered ||
                                    e.media.lastBuffered < e.media.buffered) &&
                                    Te.call(e, e.media, "progress"),
                                  (e.media.lastBuffered = e.media.buffered),
                                  1 === e.media.buffered &&
                                    (clearInterval(e.timers.buffering),
                                    Te.call(e, e.media, "canplaythrough"));
                              }, 200)),
                              t.customControls &&
                                setTimeout(function () {
                                  return rt.build.call(e);
                                }, 50);
                          }
                        },
                        onStateChange(n) {
                          var i = n.target;
                          switch (
                            (clearInterval(e.timers.playing),
                            e.media.seeking &&
                              [1, 2].includes(n.data) &&
                              ((e.media.seeking = !1),
                              Te.call(e, e.media, "seeked")),
                            n.data)
                          ) {
                            case -1:
                              Te.call(e, e.media, "timeupdate"),
                                (e.media.buffered = i.getVideoLoadedFraction()),
                                Te.call(e, e.media, "progress");
                              break;
                            case 0:
                              dt.call(e, !1),
                                e.media.loop
                                  ? (i.stopVideo(), i.playVideo())
                                  : Te.call(e, e.media, "ended");
                              break;
                            case 1:
                              t.customControls &&
                              !e.config.autoplay &&
                              e.media.paused &&
                              !e.embed.hasPlayed
                                ? e.media.pause()
                                : (dt.call(e, !0),
                                  Te.call(e, e.media, "playing"),
                                  (e.timers.playing = setInterval(function () {
                                    Te.call(e, e.media, "timeupdate");
                                  }, 50)),
                                  e.media.duration !== i.getDuration() &&
                                    ((e.media.duration = i.getDuration()),
                                    Te.call(e, e.media, "durationchange")));
                              break;
                            case 2:
                              e.muted || e.embed.unMute(), dt.call(e, !1);
                              break;
                            case 3:
                              Te.call(e, e.media, "waiting");
                          }
                          Te.call(e, e.elements.container, "statechange", !1, {
                            code: n.data,
                          });
                        },
                      },
                    });
                  }
                },
              },
              mt = {
                setup() {
                  this.media
                    ? (ce(
                        this.elements.container,
                        this.config.classNames.type.replace("{0}", this.type),
                        !0
                      ),
                      ce(
                        this.elements.container,
                        this.config.classNames.provider.replace(
                          "{0}",
                          this.provider
                        ),
                        !0
                      ),
                      this.isEmbed &&
                        ce(
                          this.elements.container,
                          this.config.classNames.type.replace("{0}", "video"),
                          !0
                        ),
                      this.isVideo &&
                        ((this.elements.wrapper = ne("div", {
                          class: this.config.classNames.video,
                        })),
                        ee(this.media, this.elements.wrapper),
                        (this.elements.poster = ne("div", {
                          class: this.config.classNames.poster,
                        })),
                        this.elements.wrapper.appendChild(
                          this.elements.poster
                        )),
                      this.isHTML5
                        ? Oe.setup.call(this)
                        : this.isYouTube
                        ? pt.setup.call(this)
                        : this.isVimeo && ut.setup.call(this))
                    : this.debug.warn("No media element found!");
                },
              },
              ft = (function () {
                function t(n) {
                  var i = this;
                  r(this, t),
                    e(this, "load", function () {
                      i.enabled &&
                        (q(window.google) && q(window.google.ima)
                          ? i.ready()
                          : lt(i.player.config.urls.googleIMA.sdk)
                              .then(function () {
                                i.ready();
                              })
                              .catch(function () {
                                i.trigger(
                                  "error",
                                  new Error("Google IMA SDK failed to load")
                                );
                              }));
                    }),
                    e(this, "ready", function () {
                      var e;
                      i.enabled ||
                        ((e = i).manager && e.manager.destroy(),
                        e.elements.displayContainer &&
                          e.elements.displayContainer.destroy(),
                        e.elements.container.remove()),
                        i.startSafetyTimer(12e3, "ready()"),
                        i.managerPromise.then(function () {
                          i.clearSafetyTimer("onAdsManagerLoaded()");
                        }),
                        i.listeners(),
                        i.setupIMA();
                    }),
                    e(this, "setupIMA", function () {
                      (i.elements.container = ne("div", {
                        class: i.player.config.classNames.ads,
                      })),
                        i.player.elements.container.appendChild(
                          i.elements.container
                        ),
                        google.ima.settings.setVpaidMode(
                          google.ima.ImaSdkSettings.VpaidMode.ENABLED
                        ),
                        google.ima.settings.setLocale(
                          i.player.config.ads.language
                        ),
                        google.ima.settings.setDisableCustomPlaybackForIOS10Plus(
                          i.player.config.playsinline
                        ),
                        (i.elements.displayContainer =
                          new google.ima.AdDisplayContainer(
                            i.elements.container,
                            i.player.media
                          )),
                        (i.loader = new google.ima.AdsLoader(
                          i.elements.displayContainer
                        )),
                        i.loader.addEventListener(
                          google.ima.AdsManagerLoadedEvent.Type
                            .ADS_MANAGER_LOADED,
                          function (e) {
                            return i.onAdsManagerLoaded(e);
                          },
                          !1
                        ),
                        i.loader.addEventListener(
                          google.ima.AdErrorEvent.Type.AD_ERROR,
                          function (e) {
                            return i.onAdError(e);
                          },
                          !1
                        ),
                        i.requestAds();
                    }),
                    e(this, "requestAds", function () {
                      var e = i.player.elements.container;
                      try {
                        var t = new google.ima.AdsRequest();
                        (t.adTagUrl = i.tagUrl),
                          (t.linearAdSlotWidth = e.offsetWidth),
                          (t.linearAdSlotHeight = e.offsetHeight),
                          (t.nonLinearAdSlotWidth = e.offsetWidth),
                          (t.nonLinearAdSlotHeight = e.offsetHeight),
                          (t.forceNonLinearFullSlot = !1),
                          t.setAdWillPlayMuted(!i.player.muted),
                          i.loader.requestAds(t);
                      } catch (e) {
                        i.onAdError(e);
                      }
                    }),
                    e(this, "pollCountdown", function () {
                      if (
                        !(
                          arguments.length > 0 &&
                          void 0 !== arguments[0] &&
                          arguments[0]
                        )
                      )
                        return (
                          clearInterval(i.countdownTimer),
                          void i.elements.container.removeAttribute(
                            "data-badge-text"
                          )
                        );
                      i.countdownTimer = setInterval(function () {
                        var e = Ke(Math.max(i.manager.getRemainingTime(), 0)),
                          t = ""
                            .concat(
                              Ve.get("advertisement", i.player.config),
                              " - "
                            )
                            .concat(e);
                        i.elements.container.setAttribute("data-badge-text", t);
                      }, 100);
                    }),
                    e(this, "onAdsManagerLoaded", function (e) {
                      if (i.enabled) {
                        var t = new google.ima.AdsRenderingSettings();
                        (t.restoreCustomPlaybackStateOnAdBreakComplete = !0),
                          (t.enablePreloading = !0),
                          (i.manager = e.getAdsManager(i.player, t)),
                          (i.cuePoints = i.manager.getCuePoints()),
                          i.manager.addEventListener(
                            google.ima.AdErrorEvent.Type.AD_ERROR,
                            function (e) {
                              return i.onAdError(e);
                            }
                          ),
                          Object.keys(google.ima.AdEvent.Type).forEach(
                            function (e) {
                              i.manager.addEventListener(
                                google.ima.AdEvent.Type[e],
                                function (e) {
                                  return i.onAdEvent(e);
                                }
                              );
                            }
                          ),
                          i.trigger("loaded");
                      }
                    }),
                    e(this, "addCuePoints", function () {
                      $(i.cuePoints) ||
                        i.cuePoints.forEach(function (e) {
                          if (0 !== e && -1 !== e && e < i.player.duration) {
                            var t = i.player.elements.progress;
                            if (U(t)) {
                              var n = (100 / i.player.duration) * e,
                                a = ne("span", {
                                  class: i.player.config.classNames.cues,
                                });
                              (a.style.left = "".concat(n.toString(), "%")),
                                t.appendChild(a);
                            }
                          }
                        });
                    }),
                    e(this, "onAdEvent", function (e) {
                      var t = i.player.elements.container,
                        n = e.getAd(),
                        a = e.getAdData();
                      switch (
                        ((function (e) {
                          Te.call(
                            i.player,
                            i.player.media,
                            "ads".concat(e.replace(/_/g, "").toLowerCase())
                          );
                        })(e.type),
                        e.type)
                      ) {
                        case google.ima.AdEvent.Type.LOADED:
                          i.trigger("loaded"),
                            i.pollCountdown(!0),
                            n.isLinear() ||
                              ((n.width = t.offsetWidth),
                              (n.height = t.offsetHeight));
                          break;
                        case google.ima.AdEvent.Type.STARTED:
                          i.manager.setVolume(i.player.volume);
                          break;
                        case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:
                          i.player.ended
                            ? i.loadAds()
                            : i.loader.contentComplete();
                          break;
                        case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:
                          i.pauseContent();
                          break;
                        case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:
                          i.pollCountdown(), i.resumeContent();
                          break;
                        case google.ima.AdEvent.Type.LOG:
                          a.adError &&
                            i.player.debug.warn(
                              "Non-fatal ad error: ".concat(
                                a.adError.getMessage()
                              )
                            );
                      }
                    }),
                    e(this, "onAdError", function (e) {
                      i.cancel(), i.player.debug.warn("Ads error", e);
                    }),
                    e(this, "listeners", function () {
                      var e,
                        t = i.player.elements.container;
                      i.player.on("canplay", function () {
                        i.addCuePoints();
                      }),
                        i.player.on("ended", function () {
                          i.loader.contentComplete();
                        }),
                        i.player.on("timeupdate", function () {
                          e = i.player.currentTime;
                        }),
                        i.player.on("seeked", function () {
                          var t = i.player.currentTime;
                          $(i.cuePoints) ||
                            i.cuePoints.forEach(function (n, a) {
                              e < n &&
                                n < t &&
                                (i.manager.discardAdBreak(),
                                i.cuePoints.splice(a, 1));
                            });
                        }),
                        window.addEventListener("resize", function () {
                          i.manager &&
                            i.manager.resize(
                              t.offsetWidth,
                              t.offsetHeight,
                              google.ima.ViewMode.NORMAL
                            );
                        });
                    }),
                    e(this, "play", function () {
                      var e = i.player.elements.container;
                      i.managerPromise || i.resumeContent(),
                        i.managerPromise
                          .then(function () {
                            i.manager.setVolume(i.player.volume),
                              i.elements.displayContainer.initialize();
                            try {
                              i.initialized ||
                                (i.manager.init(
                                  e.offsetWidth,
                                  e.offsetHeight,
                                  google.ima.ViewMode.NORMAL
                                ),
                                i.manager.start()),
                                (i.initialized = !0);
                            } catch (e) {
                              i.onAdError(e);
                            }
                          })
                          .catch(function () {});
                    }),
                    e(this, "resumeContent", function () {
                      (i.elements.container.style.zIndex = ""),
                        (i.playing = !1),
                        Ce(i.player.media.play());
                    }),
                    e(this, "pauseContent", function () {
                      (i.elements.container.style.zIndex = 3),
                        (i.playing = !0),
                        i.player.media.pause();
                    }),
                    e(this, "cancel", function () {
                      i.initialized && i.resumeContent(),
                        i.trigger("error"),
                        i.loadAds();
                    }),
                    e(this, "loadAds", function () {
                      i.managerPromise
                        .then(function () {
                          i.manager && i.manager.destroy(),
                            (i.managerPromise = new Promise(function (e) {
                              i.on("loaded", e), i.player.debug.log(i.manager);
                            })),
                            (i.initialized = !1),
                            i.requestAds();
                        })
                        .catch(function () {});
                    }),
                    e(this, "trigger", function (e) {
                      for (
                        var t = arguments.length,
                          n = new Array(t > 1 ? t - 1 : 0),
                          a = 1;
                        a < t;
                        a++
                      )
                        n[a - 1] = arguments[a];
                      var r = i.events[e];
                      V(r) &&
                        r.forEach(function (e) {
                          R(e) && e.apply(i, n);
                        });
                    }),
                    e(this, "on", function (e, t) {
                      return (
                        V(i.events[e]) || (i.events[e] = []),
                        i.events[e].push(t),
                        i
                      );
                    }),
                    e(this, "startSafetyTimer", function (e, t) {
                      i.player.debug.log(
                        "Safety timer invoked from: ".concat(t)
                      ),
                        (i.safetyTimer = setTimeout(function () {
                          i.cancel(), i.clearSafetyTimer("startSafetyTimer()");
                        }, e));
                    }),
                    e(this, "clearSafetyTimer", function (e) {
                      O(i.safetyTimer) ||
                        (i.player.debug.log(
                          "Safety timer cleared from: ".concat(e)
                        ),
                        clearTimeout(i.safetyTimer),
                        (i.safetyTimer = null));
                    }),
                    (this.player = n),
                    (this.config = n.config.ads),
                    (this.playing = !1),
                    (this.initialized = !1),
                    (this.elements = {
                      container: null,
                      displayContainer: null,
                    }),
                    (this.manager = null),
                    (this.loader = null),
                    (this.cuePoints = null),
                    (this.events = {}),
                    (this.safetyTimer = null),
                    (this.countdownTimer = null),
                    (this.managerPromise = new Promise(function (e, t) {
                      i.on("loaded", e), i.on("error", t);
                    })),
                    this.load();
                }
                return (
                  o(t, [
                    {
                      key: "enabled",
                      get: function () {
                        var e = this.config;
                        return (
                          this.player.isHTML5 &&
                          this.player.isVideo &&
                          e.enabled &&
                          (!$(e.publisherId) || Y(e.tagUrl))
                        );
                      },
                    },
                    {
                      key: "tagUrl",
                      get: function () {
                        var e = this.config;
                        return Y(e.tagUrl)
                          ? e.tagUrl
                          : "https://go.aniview.com/api/adserver6/vast/?".concat(
                              Qe({
                                AV_PUBLISHERID: "58c25bb0073ef448b1087ad6",
                                AV_CHANNELID: "5a0458dc28a06145e4519d21",
                                AV_URL: window.location.hostname,
                                cb: Date.now(),
                                AV_WIDTH: 640,
                                AV_HEIGHT: 480,
                                AV_CDIM2: e.publisherId,
                              })
                            );
                      },
                    },
                  ]),
                  t
                );
              })();
            function gt() {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 0,
                t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : 0,
                n =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 255;
              return Math.min(Math.max(e, t), n);
            }
            var yt,
              vt = function (e) {
                var t = [];
                return (
                  e.split(/\r\n\r\n|\n\n|\r\r/).forEach(function (e) {
                    var n = {};
                    e.split(/\r\n|\n|\r/).forEach(function (e) {
                      if (D(n.startTime)) {
                        if (!$(e.trim()) && $(n.text)) {
                          var t,
                            i,
                            a = e.trim().split("#xywh=");
                          (t = d(a, 1)),
                            (n.text = t[0]),
                            a[1] &&
                              ((i = d(a[1].split(","), 4)),
                              (n.x = i[0]),
                              (n.y = i[1]),
                              (n.w = i[2]),
                              (n.h = i[3]));
                        }
                      } else {
                        var r = e.match(
                          /([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})( ?--> ?)([0-9]{2})?:?([0-9]{2}):([0-9]{2}).([0-9]{2,3})/
                        );
                        r &&
                          ((n.startTime =
                            60 * Number(r[1] || 0) * 60 +
                            60 * Number(r[2]) +
                            Number(r[3]) +
                            Number("0.".concat(r[4]))),
                          (n.endTime =
                            60 * Number(r[6] || 0) * 60 +
                            60 * Number(r[7]) +
                            Number(r[8]) +
                            Number("0.".concat(r[9]))));
                      }
                    }),
                      n.text && t.push(n);
                  }),
                  t
                );
              },
              bt = function (e, t) {
                var n = {};
                return (
                  e > t.width / t.height
                    ? ((n.width = t.width), (n.height = (1 / e) * t.width))
                    : ((n.height = t.height), (n.width = e * t.height)),
                  n
                );
              },
              wt = (function () {
                function t(n) {
                  var i = this;
                  r(this, t),
                    e(this, "load", function () {
                      i.player.elements.display.seekTooltip &&
                        (i.player.elements.display.seekTooltip.hidden =
                          i.enabled),
                        i.enabled &&
                          i.getThumbnails().then(function () {
                            i.enabled &&
                              (i.render(),
                              i.determineContainerAutoSizing(),
                              (i.loaded = !0));
                          });
                    }),
                    e(this, "getThumbnails", function () {
                      return new Promise(function (e) {
                        var t = i.player.config.previewThumbnails.src;
                        if ($(t))
                          throw new Error(
                            "Missing previewThumbnails.src config attribute"
                          );
                        var n = function () {
                          i.thumbnails.sort(function (e, t) {
                            return e.height - t.height;
                          }),
                            i.player.debug.log(
                              "Preview thumbnails",
                              i.thumbnails
                            ),
                            e();
                        };
                        if (R(t))
                          t(function (e) {
                            (i.thumbnails = e), n();
                          });
                        else {
                          var a = (H(t) ? [t] : t).map(function (e) {
                            return i.getThumbnail(e);
                          });
                          Promise.all(a).then(n);
                        }
                      });
                    }),
                    e(this, "getThumbnail", function (e) {
                      return new Promise(function (t) {
                        Ue(e).then(function (n) {
                          var a = {
                            frames: vt(n),
                            height: null,
                            urlPrefix: "",
                          };
                          a.frames[0].text.startsWith("/") ||
                            a.frames[0].text.startsWith("http://") ||
                            a.frames[0].text.startsWith("https://") ||
                            (a.urlPrefix = e.substring(
                              0,
                              e.lastIndexOf("/") + 1
                            ));
                          var r = new Image();
                          (r.onload = function () {
                            (a.height = r.naturalHeight),
                              (a.width = r.naturalWidth),
                              i.thumbnails.push(a),
                              t();
                          }),
                            (r.src = a.urlPrefix + a.frames[0].text);
                        });
                      });
                    }),
                    e(this, "startMove", function (e) {
                      if (
                        i.loaded &&
                        W(e) &&
                        ["touchmove", "mousemove"].includes(e.type) &&
                        i.player.media.duration
                      ) {
                        if ("touchmove" === e.type)
                          i.seekTime =
                            i.player.media.duration *
                            (i.player.elements.inputs.seek.value / 100);
                        else {
                          var t,
                            n,
                            a =
                              i.player.elements.progress.getBoundingClientRect(),
                            r = (100 / a.width) * (e.pageX - a.left);
                          (i.seekTime = i.player.media.duration * (r / 100)),
                            i.seekTime < 0 && (i.seekTime = 0),
                            i.seekTime > i.player.media.duration - 1 &&
                              (i.seekTime = i.player.media.duration - 1),
                            (i.mousePosX = e.pageX),
                            (i.elements.thumb.time.innerText = Ke(i.seekTime));
                          var s =
                            null === (t = i.player.config.markers) ||
                            void 0 === t ||
                            null === (n = t.points) ||
                            void 0 === n
                              ? void 0
                              : n.find(function (e) {
                                  return e.time === Math.round(i.seekTime);
                                });
                          s &&
                            i.elements.thumb.time.insertAdjacentHTML(
                              "afterbegin",
                              "".concat(s.label, "<br>")
                            );
                        }
                        i.showImageAtCurrentTime();
                      }
                    }),
                    e(this, "endMove", function () {
                      i.toggleThumbContainer(!1, !0);
                    }),
                    e(this, "startScrubbing", function (e) {
                      (O(e.button) || !1 === e.button || 0 === e.button) &&
                        ((i.mouseDown = !0),
                        i.player.media.duration &&
                          (i.toggleScrubbingContainer(!0),
                          i.toggleThumbContainer(!1, !0),
                          i.showImageAtCurrentTime()));
                    }),
                    e(this, "endScrubbing", function () {
                      (i.mouseDown = !1),
                        Math.ceil(i.lastTime) ===
                        Math.ceil(i.player.media.currentTime)
                          ? i.toggleScrubbingContainer(!1)
                          : ke.call(
                              i.player,
                              i.player.media,
                              "timeupdate",
                              function () {
                                i.mouseDown || i.toggleScrubbingContainer(!1);
                              }
                            );
                    }),
                    e(this, "listeners", function () {
                      i.player.on("play", function () {
                        i.toggleThumbContainer(!1, !0);
                      }),
                        i.player.on("seeked", function () {
                          i.toggleThumbContainer(!1);
                        }),
                        i.player.on("timeupdate", function () {
                          i.lastTime = i.player.media.currentTime;
                        });
                    }),
                    e(this, "render", function () {
                      (i.elements.thumb.container = ne("div", {
                        class:
                          i.player.config.classNames.previewThumbnails
                            .thumbContainer,
                      })),
                        (i.elements.thumb.imageContainer = ne("div", {
                          class:
                            i.player.config.classNames.previewThumbnails
                              .imageContainer,
                        })),
                        i.elements.thumb.container.appendChild(
                          i.elements.thumb.imageContainer
                        );
                      var e = ne("div", {
                        class:
                          i.player.config.classNames.previewThumbnails
                            .timeContainer,
                      });
                      (i.elements.thumb.time = ne("span", {}, "00:00")),
                        e.appendChild(i.elements.thumb.time),
                        i.elements.thumb.imageContainer.appendChild(e),
                        U(i.player.elements.progress) &&
                          i.player.elements.progress.appendChild(
                            i.elements.thumb.container
                          ),
                        (i.elements.scrubbing.container = ne("div", {
                          class:
                            i.player.config.classNames.previewThumbnails
                              .scrubbingContainer,
                        })),
                        i.player.elements.wrapper.appendChild(
                          i.elements.scrubbing.container
                        );
                    }),
                    e(this, "destroy", function () {
                      i.elements.thumb.container &&
                        i.elements.thumb.container.remove(),
                        i.elements.scrubbing.container &&
                          i.elements.scrubbing.container.remove();
                    }),
                    e(this, "showImageAtCurrentTime", function () {
                      i.mouseDown
                        ? i.setScrubbingContainerSize()
                        : i.setThumbContainerSizeAndPos();
                      var e = i.thumbnails[0].frames.findIndex(function (e) {
                          return (
                            i.seekTime >= e.startTime && i.seekTime <= e.endTime
                          );
                        }),
                        t = e >= 0,
                        n = 0;
                      i.mouseDown || i.toggleThumbContainer(t),
                        t &&
                          (i.thumbnails.forEach(function (t, a) {
                            i.loadedImages.includes(t.frames[e].text) &&
                              (n = a);
                          }),
                          e !== i.showingThumb &&
                            ((i.showingThumb = e), i.loadImage(n)));
                    }),
                    e(this, "loadImage", function () {
                      var e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 0,
                        t = i.showingThumb,
                        n = i.thumbnails[e],
                        a = n.urlPrefix,
                        r = n.frames[t],
                        s = n.frames[t].text,
                        o = a + s;
                      if (
                        i.currentImageElement &&
                        i.currentImageElement.dataset.filename === s
                      )
                        i.showImage(i.currentImageElement, r, e, t, s, !1),
                          (i.currentImageElement.dataset.index = t),
                          i.removeOldImages(i.currentImageElement);
                      else {
                        i.loadingImage &&
                          i.usingSprites &&
                          (i.loadingImage.onload = null);
                        var l = new Image();
                        (l.src = o),
                          (l.dataset.index = t),
                          (l.dataset.filename = s),
                          (i.showingThumbFilename = s),
                          i.player.debug.log("Loading image: ".concat(o)),
                          (l.onload = function () {
                            return i.showImage(l, r, e, t, s, !0);
                          }),
                          (i.loadingImage = l),
                          i.removeOldImages(l);
                      }
                    }),
                    e(this, "showImage", function (e, t, n, a, r) {
                      var s =
                        !(arguments.length > 5 && void 0 !== arguments[5]) ||
                        arguments[5];
                      i.player.debug.log(
                        "Showing thumb: "
                          .concat(r, ". num: ")
                          .concat(a, ". qual: ")
                          .concat(n, ". newimg: ")
                          .concat(s)
                      ),
                        i.setImageSizeAndOffset(e, t),
                        s &&
                          (i.currentImageContainer.appendChild(e),
                          (i.currentImageElement = e),
                          i.loadedImages.includes(r) || i.loadedImages.push(r)),
                        i
                          .preloadNearby(a, !0)
                          .then(i.preloadNearby(a, !1))
                          .then(i.getHigherQuality(n, e, t, r));
                    }),
                    e(this, "removeOldImages", function (e) {
                      Array.from(i.currentImageContainer.children).forEach(
                        function (t) {
                          if ("img" === t.tagName.toLowerCase()) {
                            var n = i.usingSprites ? 500 : 1e3;
                            if (
                              t.dataset.index !== e.dataset.index &&
                              !t.dataset.deleting
                            ) {
                              t.dataset.deleting = !0;
                              var a = i.currentImageContainer;
                              setTimeout(function () {
                                a.removeChild(t),
                                  i.player.debug.log(
                                    "Removing thumb: ".concat(
                                      t.dataset.filename
                                    )
                                  );
                              }, n);
                            }
                          }
                        }
                      );
                    }),
                    e(this, "preloadNearby", function (e) {
                      var t =
                        !(arguments.length > 1 && void 0 !== arguments[1]) ||
                        arguments[1];
                      return new Promise(function (n) {
                        setTimeout(function () {
                          var a = i.thumbnails[0].frames[e].text;
                          if (i.showingThumbFilename === a) {
                            var r;
                            r = t
                              ? i.thumbnails[0].frames.slice(e)
                              : i.thumbnails[0].frames.slice(0, e).reverse();
                            var s = !1;
                            r.forEach(function (e) {
                              var t = e.text;
                              if (t !== a && !i.loadedImages.includes(t)) {
                                (s = !0),
                                  i.player.debug.log(
                                    "Preloading thumb filename: ".concat(t)
                                  );
                                var r = i.thumbnails[0].urlPrefix + t,
                                  o = new Image();
                                (o.src = r),
                                  (o.onload = function () {
                                    i.player.debug.log(
                                      "Preloaded thumb filename: ".concat(t)
                                    ),
                                      i.loadedImages.includes(t) ||
                                        i.loadedImages.push(t),
                                      n();
                                  });
                              }
                            }),
                              s || n();
                          }
                        }, 300);
                      });
                    }),
                    e(this, "getHigherQuality", function (e, t, n, a) {
                      if (e < i.thumbnails.length - 1) {
                        var r = t.naturalHeight;
                        i.usingSprites && (r = n.h),
                          r < i.thumbContainerHeight &&
                            setTimeout(function () {
                              i.showingThumbFilename === a &&
                                (i.player.debug.log(
                                  "Showing higher quality thumb for: ".concat(a)
                                ),
                                i.loadImage(e + 1));
                            }, 300);
                      }
                    }),
                    e(this, "toggleThumbContainer", function () {
                      var e =
                          arguments.length > 0 &&
                          void 0 !== arguments[0] &&
                          arguments[0],
                        t =
                          arguments.length > 1 &&
                          void 0 !== arguments[1] &&
                          arguments[1],
                        n =
                          i.player.config.classNames.previewThumbnails
                            .thumbContainerShown;
                      i.elements.thumb.container.classList.toggle(n, e),
                        !e &&
                          t &&
                          ((i.showingThumb = null),
                          (i.showingThumbFilename = null));
                    }),
                    e(this, "toggleScrubbingContainer", function () {
                      var e =
                          arguments.length > 0 &&
                          void 0 !== arguments[0] &&
                          arguments[0],
                        t =
                          i.player.config.classNames.previewThumbnails
                            .scrubbingContainerShown;
                      i.elements.scrubbing.container.classList.toggle(t, e),
                        e ||
                          ((i.showingThumb = null),
                          (i.showingThumbFilename = null));
                    }),
                    e(this, "determineContainerAutoSizing", function () {
                      (i.elements.thumb.imageContainer.clientHeight > 20 ||
                        i.elements.thumb.imageContainer.clientWidth > 20) &&
                        (i.sizeSpecifiedInCSS = !0);
                    }),
                    e(this, "setThumbContainerSizeAndPos", function () {
                      var e = i.elements.thumb.imageContainer;
                      if (i.sizeSpecifiedInCSS) {
                        if (e.clientHeight > 20 && e.clientWidth < 20) {
                          var t = Math.floor(
                            e.clientHeight * i.thumbAspectRatio
                          );
                          e.style.width = "".concat(t, "px");
                        } else if (e.clientHeight < 20 && e.clientWidth > 20) {
                          var n = Math.floor(
                            e.clientWidth / i.thumbAspectRatio
                          );
                          e.style.height = "".concat(n, "px");
                        }
                      } else {
                        var a = Math.floor(
                          i.thumbContainerHeight * i.thumbAspectRatio
                        );
                        (e.style.height = "".concat(
                          i.thumbContainerHeight,
                          "px"
                        )),
                          (e.style.width = "".concat(a, "px"));
                      }
                      i.setThumbContainerPos();
                    }),
                    e(this, "setThumbContainerPos", function () {
                      var e =
                          i.player.elements.progress.getBoundingClientRect(),
                        t = i.player.elements.container.getBoundingClientRect(),
                        n = i.elements.thumb.container,
                        a = t.left - e.left + 10,
                        r = t.right - e.left - n.clientWidth - 10,
                        s = i.mousePosX - e.left - n.clientWidth / 2,
                        o = gt(s, a, r);
                      (n.style.left = "".concat(o, "px")),
                        n.style.setProperty(
                          "--preview-arrow-offset",
                          s - o + "px"
                        );
                    }),
                    e(this, "setScrubbingContainerSize", function () {
                      var e = bt(i.thumbAspectRatio, {
                          width: i.player.media.clientWidth,
                          height: i.player.media.clientHeight,
                        }),
                        t = e.width,
                        n = e.height;
                      (i.elements.scrubbing.container.style.width = "".concat(
                        t,
                        "px"
                      )),
                        (i.elements.scrubbing.container.style.height =
                          "".concat(n, "px"));
                    }),
                    e(this, "setImageSizeAndOffset", function (e, t) {
                      if (i.usingSprites) {
                        var n = i.thumbContainerHeight / t.h;
                        (e.style.height = e.naturalHeight * n + "px"),
                          (e.style.width = e.naturalWidth * n + "px"),
                          (e.style.left = "-".concat(t.x * n, "px")),
                          (e.style.top = "-".concat(t.y * n, "px"));
                      }
                    }),
                    (this.player = n),
                    (this.thumbnails = []),
                    (this.loaded = !1),
                    (this.lastMouseMoveTime = Date.now()),
                    (this.mouseDown = !1),
                    (this.loadedImages = []),
                    (this.elements = { thumb: {}, scrubbing: {} }),
                    this.load();
                }
                return (
                  o(t, [
                    {
                      key: "enabled",
                      get: function () {
                        return (
                          this.player.isHTML5 &&
                          this.player.isVideo &&
                          this.player.config.previewThumbnails.enabled
                        );
                      },
                    },
                    {
                      key: "currentImageContainer",
                      get: function () {
                        return this.mouseDown
                          ? this.elements.scrubbing.container
                          : this.elements.thumb.imageContainer;
                      },
                    },
                    {
                      key: "usingSprites",
                      get: function () {
                        return Object.keys(
                          this.thumbnails[0].frames[0]
                        ).includes("w");
                      },
                    },
                    {
                      key: "thumbAspectRatio",
                      get: function () {
                        return this.usingSprites
                          ? this.thumbnails[0].frames[0].w /
                              this.thumbnails[0].frames[0].h
                          : this.thumbnails[0].width /
                              this.thumbnails[0].height;
                      },
                    },
                    {
                      key: "thumbContainerHeight",
                      get: function () {
                        return this.mouseDown
                          ? bt(this.thumbAspectRatio, {
                              width: this.player.media.clientWidth,
                              height: this.player.media.clientHeight,
                            }).height
                          : this.sizeSpecifiedInCSS
                          ? this.elements.thumb.imageContainer.clientHeight
                          : Math.floor(
                              this.player.media.clientWidth /
                                this.thumbAspectRatio /
                                4
                            );
                      },
                    },
                    {
                      key: "currentImageElement",
                      get: function () {
                        return this.mouseDown
                          ? this.currentScrubbingImageElement
                          : this.currentThumbnailImageElement;
                      },
                      set: function (e) {
                        this.mouseDown
                          ? (this.currentScrubbingImageElement = e)
                          : (this.currentThumbnailImageElement = e);
                      },
                    },
                  ]),
                  t
                );
              })(),
              kt = {
                insertElements(e, t) {
                  var n = this;
                  H(t)
                    ? ie(e, this.media, { src: t })
                    : V(t) &&
                      t.forEach(function (t) {
                        ie(e, n.media, t);
                      });
                },
                change(e) {
                  var t = this;
                  G(e, "sources.length")
                    ? (Oe.cancelRequests.call(this),
                      this.destroy.call(
                        this,
                        function () {
                          (t.options.quality = []),
                            ae(t.media),
                            (t.media = null),
                            U(t.elements.container) &&
                              t.elements.container.removeAttribute("class");
                          var n = e.sources,
                            i = e.type,
                            a = d(n, 1)[0],
                            r = a.provider,
                            s = void 0 === r ? Ze.html5 : r,
                            o = a.src,
                            l = "html5" === s ? i : "div",
                            c = "html5" === s ? {} : { src: o };
                          Object.assign(t, {
                            provider: s,
                            type: i,
                            supported: ge.check(i, s, t.config.playsinline),
                            media: ne(l, c),
                          }),
                            t.elements.container.appendChild(t.media),
                            F(e.autoplay) && (t.config.autoplay = e.autoplay),
                            t.isHTML5 &&
                              (t.config.crossorigin &&
                                t.media.setAttribute("crossorigin", ""),
                              t.config.autoplay &&
                                t.media.setAttribute("autoplay", ""),
                              $(e.poster) || (t.poster = e.poster),
                              t.config.loop.active &&
                                t.media.setAttribute("loop", ""),
                              t.config.muted &&
                                t.media.setAttribute("muted", ""),
                              t.config.playsinline &&
                                t.media.setAttribute("playsinline", "")),
                            rt.addStyleHook.call(t),
                            t.isHTML5 && kt.insertElements.call(t, "source", n),
                            (t.config.title = e.title),
                            mt.setup.call(t),
                            t.isHTML5 &&
                              Object.keys(e).includes("tracks") &&
                              kt.insertElements.call(t, "track", e.tracks),
                            (t.isHTML5 || (t.isEmbed && !t.supported.ui)) &&
                              rt.build.call(t),
                            t.isHTML5 && t.media.load(),
                            $(e.previewThumbnails) ||
                              (Object.assign(
                                t.config.previewThumbnails,
                                e.previewThumbnails
                              ),
                              t.previewThumbnails &&
                                t.previewThumbnails.loaded &&
                                (t.previewThumbnails.destroy(),
                                (t.previewThumbnails = null)),
                              t.config.previewThumbnails.enabled &&
                                (t.previewThumbnails = new wt(t))),
                            t.fullscreen.update();
                        },
                        !0
                      ))
                    : this.debug.warn("Invalid source format");
                },
              },
              Tt = (function () {
                function t(n, i) {
                  var a = this;
                  if (
                    (r(this, t),
                    e(this, "play", function () {
                      return R(a.media.play)
                        ? (a.ads &&
                            a.ads.enabled &&
                            a.ads.managerPromise
                              .then(function () {
                                return a.ads.play();
                              })
                              .catch(function () {
                                return Ce(a.media.play());
                              }),
                          a.media.play())
                        : null;
                    }),
                    e(this, "pause", function () {
                      return a.playing && R(a.media.pause)
                        ? a.media.pause()
                        : null;
                    }),
                    e(this, "togglePlay", function (e) {
                      return (F(e) ? e : !a.playing) ? a.play() : a.pause();
                    }),
                    e(this, "stop", function () {
                      a.isHTML5
                        ? (a.pause(), a.restart())
                        : R(a.media.stop) && a.media.stop();
                    }),
                    e(this, "restart", function () {
                      a.currentTime = 0;
                    }),
                    e(this, "rewind", function (e) {
                      a.currentTime -= D(e) ? e : a.config.seekTime;
                    }),
                    e(this, "forward", function (e) {
                      a.currentTime += D(e) ? e : a.config.seekTime;
                    }),
                    e(this, "increaseVolume", function (e) {
                      var t = a.media.muted ? 0 : a.volume;
                      a.volume = t + (D(e) ? e : 0);
                    }),
                    e(this, "decreaseVolume", function (e) {
                      a.increaseVolume(-e);
                    }),
                    e(this, "airplay", function () {
                      ge.airplay && a.media.webkitShowPlaybackTargetPicker();
                    }),
                    e(this, "toggleControls", function (e) {
                      if (a.supported.ui && !a.isAudio) {
                        var t = ue(
                            a.elements.container,
                            a.config.classNames.hideControls
                          ),
                          n = void 0 === e ? void 0 : !e,
                          i = ce(
                            a.elements.container,
                            a.config.classNames.hideControls,
                            n
                          );
                        if (
                          (i &&
                            V(a.config.controls) &&
                            a.config.controls.includes("settings") &&
                            !$(a.config.settings) &&
                            Ye.toggleMenu.call(a, !1),
                          i !== t)
                        ) {
                          var r = i ? "controlshidden" : "controlsshown";
                          Te.call(a, a.media, r);
                        }
                        return !i;
                      }
                      return !1;
                    }),
                    e(this, "on", function (e, t) {
                      be.call(a, a.elements.container, e, t);
                    }),
                    e(this, "once", function (e, t) {
                      ke.call(a, a.elements.container, e, t);
                    }),
                    e(this, "off", function (e, t) {
                      we(a.elements.container, e, t);
                    }),
                    e(this, "destroy", function (e) {
                      var t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      if (a.ready) {
                        var n = function () {
                          (document.body.style.overflow = ""),
                            (a.embed = null),
                            t
                              ? (Object.keys(a.elements).length &&
                                  (ae(a.elements.buttons.play),
                                  ae(a.elements.captions),
                                  ae(a.elements.controls),
                                  ae(a.elements.wrapper),
                                  (a.elements.buttons.play = null),
                                  (a.elements.captions = null),
                                  (a.elements.controls = null),
                                  (a.elements.wrapper = null)),
                                R(e) && e())
                              : (Se.call(a),
                                Oe.cancelRequests.call(a),
                                se(a.elements.original, a.elements.container),
                                Te.call(
                                  a,
                                  a.elements.original,
                                  "destroyed",
                                  !0
                                ),
                                R(e) && e.call(a.elements.original),
                                (a.ready = !1),
                                setTimeout(function () {
                                  (a.elements = null), (a.media = null);
                                }, 200));
                        };
                        a.stop(),
                          clearTimeout(a.timers.loading),
                          clearTimeout(a.timers.controls),
                          clearTimeout(a.timers.resized),
                          a.isHTML5
                            ? (rt.toggleNativeControls.call(a, !0), n())
                            : a.isYouTube
                            ? (clearInterval(a.timers.buffering),
                              clearInterval(a.timers.playing),
                              null !== a.embed &&
                                R(a.embed.destroy) &&
                                a.embed.destroy(),
                              n())
                            : a.isVimeo &&
                              (null !== a.embed && a.embed.unload().then(n),
                              setTimeout(n, 200));
                      }
                    }),
                    e(this, "supports", function (e) {
                      return ge.mime.call(a, e);
                    }),
                    (this.timers = {}),
                    (this.ready = !1),
                    (this.loading = !1),
                    (this.failed = !1),
                    (this.touch = ge.touch),
                    (this.media = n),
                    H(this.media) &&
                      (this.media = document.querySelectorAll(this.media)),
                    ((window.jQuery && this.media instanceof jQuery) ||
                      B(this.media) ||
                      V(this.media)) &&
                      (this.media = this.media[0]),
                    (this.config = Z(
                      {},
                      Je,
                      t.defaults,
                      i || {},
                      (function () {
                        try {
                          return JSON.parse(
                            a.media.getAttribute("data-plyr-config")
                          );
                        } catch (e) {
                          return {};
                        }
                      })()
                    )),
                    (this.elements = {
                      container: null,
                      fullscreen: null,
                      captions: null,
                      buttons: {},
                      display: {},
                      progress: {},
                      inputs: {},
                      settings: {
                        popup: null,
                        menu: null,
                        panels: {},
                        buttons: {},
                      },
                    }),
                    (this.captions = {
                      active: null,
                      currentTrack: -1,
                      meta: new WeakMap(),
                    }),
                    (this.fullscreen = { active: !1 }),
                    (this.options = { speed: [], quality: [] }),
                    (this.debug = new nt(this.config.debug)),
                    this.debug.log("Config", this.config),
                    this.debug.log("Support", ge),
                    !O(this.media) && U(this.media))
                  )
                    if (this.media.plyr)
                      this.debug.warn("Target already setup");
                    else if (this.config.enabled)
                      if (ge.check().api) {
                        var s = this.media.cloneNode(!0);
                        (s.autoplay = !1), (this.elements.original = s);
                        var o = this.media.tagName.toLowerCase(),
                          l = null,
                          c = null;
                        switch (o) {
                          case "div":
                            if (
                              ((l = this.media.querySelector("iframe")), U(l))
                            ) {
                              if (
                                ((c = $e(l.getAttribute("src"))),
                                (this.provider = (function (e) {
                                  return /^(https?:\/\/)?(www\.)?(youtube\.com|youtube-nocookie\.com|youtu\.?be)\/.+$/.test(
                                    e
                                  )
                                    ? Ze.youtube
                                    : /^https?:\/\/player.vimeo.com\/video\/\d{0,9}(?=\b|\/)/.test(
                                        e
                                      )
                                    ? Ze.vimeo
                                    : null;
                                })(c.toString())),
                                (this.elements.container = this.media),
                                (this.media = l),
                                (this.elements.container.className = ""),
                                c.search.length)
                              ) {
                                var u = ["1", "true"];
                                u.includes(c.searchParams.get("autoplay")) &&
                                  (this.config.autoplay = !0),
                                  u.includes(c.searchParams.get("loop")) &&
                                    (this.config.loop.active = !0),
                                  this.isYouTube
                                    ? ((this.config.playsinline = u.includes(
                                        c.searchParams.get("playsinline")
                                      )),
                                      (this.config.youtube.hl =
                                        c.searchParams.get("hl")))
                                    : (this.config.playsinline = !0);
                              }
                            } else
                              (this.provider = this.media.getAttribute(
                                this.config.attributes.embed.provider
                              )),
                                this.media.removeAttribute(
                                  this.config.attributes.embed.provider
                                );
                            if (
                              $(this.provider) ||
                              !Object.values(Ze).includes(this.provider)
                            )
                              return void this.debug.error(
                                "Setup failed: Invalid provider"
                              );
                            this.type = et;
                            break;
                          case "video":
                          case "audio":
                            (this.type = o),
                              (this.provider = Ze.html5),
                              this.media.hasAttribute("crossorigin") &&
                                (this.config.crossorigin = !0),
                              this.media.hasAttribute("autoplay") &&
                                (this.config.autoplay = !0),
                              (this.media.hasAttribute("playsinline") ||
                                this.media.hasAttribute(
                                  "webkit-playsinline"
                                )) &&
                                (this.config.playsinline = !0),
                              this.media.hasAttribute("muted") &&
                                (this.config.muted = !0),
                              this.media.hasAttribute("loop") &&
                                (this.config.loop.active = !0);
                            break;
                          default:
                            return void this.debug.error(
                              "Setup failed: unsupported type"
                            );
                        }
                        (this.supported = ge.check(
                          this.type,
                          this.provider,
                          this.config.playsinline
                        )),
                          this.supported.api
                            ? ((this.eventListeners = []),
                              (this.listeners = new st(this)),
                              (this.storage = new Be(this)),
                              (this.media.plyr = this),
                              U(this.elements.container) ||
                                ((this.elements.container = ne("div", {
                                  tabindex: 0,
                                })),
                                ee(this.media, this.elements.container)),
                              rt.migrateStyles.call(this),
                              rt.addStyleHook.call(this),
                              mt.setup.call(this),
                              this.config.debug &&
                                be.call(
                                  this,
                                  this.elements.container,
                                  this.config.events.join(" "),
                                  function (e) {
                                    a.debug.log("event: ".concat(e.type));
                                  }
                                ),
                              (this.fullscreen = new it(this)),
                              (this.isHTML5 ||
                                (this.isEmbed && !this.supported.ui)) &&
                                rt.build.call(this),
                              this.listeners.container(),
                              this.listeners.global(),
                              this.config.ads.enabled &&
                                (this.ads = new ft(this)),
                              this.isHTML5 &&
                                this.config.autoplay &&
                                this.once("canplay", function () {
                                  return Ce(a.play());
                                }),
                              (this.lastSeekTime = 0),
                              this.config.previewThumbnails.enabled &&
                                (this.previewThumbnails = new wt(this)))
                            : this.debug.error("Setup failed: no support");
                      } else this.debug.error("Setup failed: no support");
                    else this.debug.error("Setup failed: disabled by config");
                  else
                    this.debug.error(
                      "Setup failed: no suitable element passed"
                    );
                }
                return (
                  o(
                    t,
                    [
                      {
                        key: "isHTML5",
                        get: function () {
                          return this.provider === Ze.html5;
                        },
                      },
                      {
                        key: "isEmbed",
                        get: function () {
                          return this.isYouTube || this.isVimeo;
                        },
                      },
                      {
                        key: "isYouTube",
                        get: function () {
                          return this.provider === Ze.youtube;
                        },
                      },
                      {
                        key: "isVimeo",
                        get: function () {
                          return this.provider === Ze.vimeo;
                        },
                      },
                      {
                        key: "isVideo",
                        get: function () {
                          return this.type === et;
                        },
                      },
                      {
                        key: "isAudio",
                        get: function () {
                          return "audio" === this.type;
                        },
                      },
                      {
                        key: "playing",
                        get: function () {
                          return Boolean(
                            this.ready && !this.paused && !this.ended
                          );
                        },
                      },
                      {
                        key: "paused",
                        get: function () {
                          return Boolean(this.media.paused);
                        },
                      },
                      {
                        key: "stopped",
                        get: function () {
                          return Boolean(this.paused && 0 === this.currentTime);
                        },
                      },
                      {
                        key: "ended",
                        get: function () {
                          return Boolean(this.media.ended);
                        },
                      },
                      {
                        key: "currentTime",
                        get: function () {
                          return Number(this.media.currentTime);
                        },
                        set: function (e) {
                          if (this.duration) {
                            var t = D(e) && e > 0;
                            (this.media.currentTime = t
                              ? Math.min(e, this.duration)
                              : 0),
                              this.debug.log(
                                "Seeking to ".concat(
                                  this.currentTime,
                                  " seconds"
                                )
                              );
                          }
                        },
                      },
                      {
                        key: "buffered",
                        get: function () {
                          var e = this.media.buffered;
                          return D(e)
                            ? e
                            : e && e.length && this.duration > 0
                            ? e.end(0) / this.duration
                            : 0;
                        },
                      },
                      {
                        key: "seeking",
                        get: function () {
                          return Boolean(this.media.seeking);
                        },
                      },
                      {
                        key: "duration",
                        get: function () {
                          var e = parseFloat(this.config.duration),
                            t = (this.media || {}).duration,
                            n = D(t) && t !== 1 / 0 ? t : 0;
                          return e || n;
                        },
                      },
                      {
                        key: "volume",
                        get: function () {
                          return Number(this.media.volume);
                        },
                        set: function (e) {
                          var t = e;
                          H(t) && (t = Number(t)),
                            D(t) || (t = this.storage.get("volume")),
                            D(t) || (t = this.config.volume),
                            t > 1 && (t = 1),
                            t < 0 && (t = 0),
                            (this.config.volume = t),
                            (this.media.volume = t),
                            !$(e) && this.muted && t > 0 && (this.muted = !1);
                        },
                      },
                      {
                        key: "muted",
                        get: function () {
                          return Boolean(this.media.muted);
                        },
                        set: function (e) {
                          var t = e;
                          F(t) || (t = this.storage.get("muted")),
                            F(t) || (t = this.config.muted),
                            (this.config.muted = t),
                            (this.media.muted = t);
                        },
                      },
                      {
                        key: "hasAudio",
                        get: function () {
                          return (
                            !this.isHTML5 ||
                            !!this.isAudio ||
                            Boolean(this.media.mozHasAudio) ||
                            Boolean(this.media.webkitAudioDecodedByteCount) ||
                            Boolean(
                              this.media.audioTracks &&
                                this.media.audioTracks.length
                            )
                          );
                        },
                      },
                      {
                        key: "speed",
                        get: function () {
                          return Number(this.media.playbackRate);
                        },
                        set: function (e) {
                          var t = this,
                            n = null;
                          D(e) && (n = e),
                            D(n) || (n = this.storage.get("speed")),
                            D(n) || (n = this.config.speed.selected);
                          var i = this.minimumSpeed,
                            a = this.maximumSpeed;
                          (n = gt(n, i, a)),
                            (this.config.speed.selected = n),
                            setTimeout(function () {
                              t.media && (t.media.playbackRate = n);
                            }, 0);
                        },
                      },
                      {
                        key: "minimumSpeed",
                        get: function () {
                          return this.isYouTube
                            ? Math.min.apply(Math, a(this.options.speed))
                            : this.isVimeo
                            ? 0.5
                            : 0.0625;
                        },
                      },
                      {
                        key: "maximumSpeed",
                        get: function () {
                          return this.isYouTube
                            ? Math.max.apply(Math, a(this.options.speed))
                            : this.isVimeo
                            ? 2
                            : 16;
                        },
                      },
                      {
                        key: "quality",
                        get: function () {
                          return this.media.quality;
                        },
                        set: function (e) {
                          var t = this.config.quality,
                            n = this.options.quality;
                          if (n.length) {
                            var i = [
                                !$(e) && Number(e),
                                this.storage.get("quality"),
                                t.selected,
                                t.default,
                              ].find(D),
                              a = !0;
                            if (!n.includes(i)) {
                              var r = Pe(n, i);
                              this.debug.warn(
                                "Unsupported quality option: "
                                  .concat(i, ", using ")
                                  .concat(r, " instead")
                              ),
                                (i = r),
                                (a = !1);
                            }
                            (t.selected = i),
                              (this.media.quality = i),
                              a && this.storage.set({ quality: i });
                          }
                        },
                      },
                      {
                        key: "loop",
                        get: function () {
                          return Boolean(this.media.loop);
                        },
                        set: function (e) {
                          var t = F(e) ? e : this.config.loop.active;
                          (this.config.loop.active = t), (this.media.loop = t);
                        },
                      },
                      {
                        key: "source",
                        get: function () {
                          return this.media.currentSrc;
                        },
                        set: function (e) {
                          kt.change.call(this, e);
                        },
                      },
                      {
                        key: "download",
                        get: function () {
                          var e = this.config.urls.download;
                          return Y(e) ? e : this.source;
                        },
                        set: function (e) {
                          Y(e) &&
                            ((this.config.urls.download = e),
                            Ye.setDownloadUrl.call(this));
                        },
                      },
                      {
                        key: "poster",
                        get: function () {
                          return this.isVideo
                            ? this.media.getAttribute("poster") ||
                                this.media.getAttribute("data-poster")
                            : null;
                        },
                        set: function (e) {
                          this.isVideo
                            ? rt.setPoster
                                .call(this, e, !1)
                                .catch(function () {})
                            : this.debug.warn(
                                "Poster can only be set for video"
                              );
                        },
                      },
                      {
                        key: "ratio",
                        get: function () {
                          if (!this.isVideo) return null;
                          var e = je(Ne.call(this));
                          return V(e) ? e.join(":") : e;
                        },
                        set: function (e) {
                          this.isVideo
                            ? H(e) && Le(e)
                              ? ((this.config.ratio = je(e)), Ie.call(this))
                              : this.debug.error(
                                  "Invalid aspect ratio specified (".concat(
                                    e,
                                    ")"
                                  )
                                )
                            : this.debug.warn(
                                "Aspect ratio can only be set for video"
                              );
                        },
                      },
                      {
                        key: "autoplay",
                        get: function () {
                          return Boolean(this.config.autoplay);
                        },
                        set: function (e) {
                          this.config.autoplay = F(e)
                            ? e
                            : this.config.autoplay;
                        },
                      },
                      {
                        key: "toggleCaptions",
                        value: function (e) {
                          Xe.toggle.call(this, e, !1);
                        },
                      },
                      {
                        key: "currentTrack",
                        get: function () {
                          var e = this.captions,
                            t = e.toggled,
                            n = e.currentTrack;
                          return t ? n : -1;
                        },
                        set: function (e) {
                          Xe.set.call(this, e, !1), Xe.setup.call(this);
                        },
                      },
                      {
                        key: "language",
                        get: function () {
                          return (Xe.getCurrentTrack.call(this) || {}).language;
                        },
                        set: function (e) {
                          Xe.setLanguage.call(this, e, !1);
                        },
                      },
                      {
                        key: "pip",
                        get: function () {
                          return ge.pip
                            ? $(this.media.webkitPresentationMode)
                              ? this.media === document.pictureInPictureElement
                              : this.media.webkitPresentationMode === Ge
                            : null;
                        },
                        set: function (e) {
                          if (ge.pip) {
                            var t = F(e) ? e : !this.pip;
                            R(this.media.webkitSetPresentationMode) &&
                              this.media.webkitSetPresentationMode(
                                t ? Ge : "inline"
                              ),
                              R(this.media.requestPictureInPicture) &&
                                (!this.pip && t
                                  ? this.media.requestPictureInPicture()
                                  : this.pip &&
                                    !t &&
                                    document.exitPictureInPicture());
                          }
                        },
                      },
                      {
                        key: "setPreviewThumbnails",
                        value: function (e) {
                          this.previewThumbnails &&
                            this.previewThumbnails.loaded &&
                            (this.previewThumbnails.destroy(),
                            (this.previewThumbnails = null)),
                            Object.assign(this.config.previewThumbnails, e),
                            this.config.previewThumbnails.enabled &&
                              (this.previewThumbnails = new wt(this));
                        },
                      },
                    ],
                    [
                      {
                        key: "supported",
                        value: function (e, t, n) {
                          return ge.check(e, t, n);
                        },
                      },
                      {
                        key: "loadSprite",
                        value: function (e, t) {
                          return We(e, t);
                        },
                      },
                      {
                        key: "setup",
                        value: function (e) {
                          var n =
                              arguments.length > 1 && void 0 !== arguments[1]
                                ? arguments[1]
                                : {},
                            i = null;
                          return (
                            H(e)
                              ? (i = Array.from(document.querySelectorAll(e)))
                              : B(e)
                              ? (i = Array.from(e))
                              : V(e) && (i = e.filter(U)),
                            $(i)
                              ? null
                              : i.map(function (e) {
                                  return new t(e, n);
                                })
                          );
                        },
                      },
                    ]
                  ),
                  t
                );
              })();
            return (
              (Tt.defaults = ((yt = Je), JSON.parse(JSON.stringify(yt)))), Tt
            );
          })());
      },
      "./src/assets/js/MySwiper.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Swipers: function () {
              return i;
            },
          });
        var i = function () {
          document.addEventListener("DOMContentLoaded", function () {
            var e = new Swiper(".slider-js-2", {
              slidesPerView: 4,
              direction: "vertical",
              freeMode: !0,
              watchSlidesProgress: !0,
            });
            new Swiper(".slider-js-1", {
              spaceBetween: 10,
              navigation: {
                nextEl: ".swiper-button-next",
                prevEl: ".swiper-button-prev",
              },
              thumbs: { swiper: e },
              effect: "fade",
              fadeEffect: { crossFade: !0 },
            }),
              new Swiper(".slider-full-js", {
                slidesPerView: 4,
                loop: "true",
                speed: 300,
                spaceBetween: 14,
                grabCursor: !0,
                pagination: { el: ".swiper-pagination-rew", clickable: !0 },
                navigation: { prevEl: ".js-rew-prev", nextEl: ".js-rew-next" },
                breakpoints: { 900: { spaceBetween: 22 } },
              });
          });
        };
      },
      "./src/assets/js/animation.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Anim: function () {
              return i;
            },
          });
        var i = function () {
          document.addEventListener("DOMContentLoaded", function () {
            var e = document.querySelectorAll("._anim-top"),
              t = document.querySelectorAll("._anim-left"),
              n = document.querySelectorAll("._anim-right"),
              i = Array.prototype.slice.call(e),
              a = Array.prototype.slice.call(t),
              r = Array.prototype.slice.call(n);
            i.length > 0 &&
              i.forEach(function (e) {
                var t = e.getBoundingClientRect();
                window.addEventListener("scroll", function () {
                  t.top < document.body.offsetHeight - 200 &&
                    e.classList.add("_is-active");
                });
              }),
              a.length > 0 &&
                a.forEach(function (e) {
                  var t = e.getBoundingClientRect();
                  window.addEventListener("scroll", function () {
                    t.top < document.body.offsetHeight - 200 &&
                      e.classList.add("_is-active");
                  });
                }),
              r.length > 0 &&
                r.forEach(function (e) {
                  var t = e.getBoundingClientRect();
                  window.addEventListener("scroll", function () {
                    t.top < document.body.offsetHeight - 200 &&
                      e.classList.add("_is-active");
                  });
                });
          });
        };
      },
      "./src/assets/js/button.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Button: function () {
              return i;
            },
          });
        var i = function (e) {
          var t = e.target.closest(".but-wave");
          e.preventDefault();
          var n = Math.max(t.clientWidth, t.clientHeight),
            i = document.createElement("div"),
            a = t.getBoundingClientRect();
          i.classList.add("addDiv"),
            (i.style.width = i.style.height = n + "px"),
            (i.style.left = e.clientX - a.left - n / 2 + "px"),
            (i.style.top = e.clientY - a.top - n / 2 + "px"),
            t.closest(".but-wave").append(i),
            setTimeout(function () {
              i.remove();
            }, 300);
        };
      },
      "./src/assets/js/constants.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            body: function () {
              return i;
            },
            header: function () {
              return s;
            },
            popupsInit: function () {
              return r;
            },
            toysPlyr: function () {
              return o;
            },
            waves: function () {
              return a;
            },
          }),
          n("./node_modules/plyr/dist/plyr.min.js");
        var i = document.querySelector("body"),
          a = document.querySelectorAll(".but-wave"),
          r = document.querySelectorAll(".popups-init-js"),
          s = document.querySelector("header"),
          o = document.querySelector(".toys__plyr");
      },
      "./src/assets/js/galSwiper.js": function (e, t, n) {
        "use strict";
        function i(e) {
          return (
            (function (e) {
              if (Array.isArray(e)) return a(e);
            })(e) ||
            (function (e) {
              if (
                ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
                null != e["@@iterator"]
              )
                return Array.from(e);
            })(e) ||
            (function (e, t) {
              if (e) {
                if ("string" == typeof e) return a(e, t);
                var n = Object.prototype.toString.call(e).slice(8, -1);
                return (
                  "Object" === n && e.constructor && (n = e.constructor.name),
                  "Map" === n || "Set" === n
                    ? Array.from(e)
                    : "Arguments" === n ||
                      /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                    ? a(e, t)
                    : void 0
                );
              }
            })(e) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function a(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
          return i;
        }
        n.r(t),
          n.d(t, {
            Gal: function () {
              return r;
            },
          });
        var r = function (e) {
          var t,
            n = new Swiper(".s2swiper", {
              speed: 300,
              centeredSlides: !0,
              spaceBetween: 11,
              effect: "coverflow",
              coverflowEffect: { rotate: 0, stretch: 0, depth: 0 },
              navigation: { prevEl: ".s2-prev", nextEl: ".s2-next" },
              loop: !0,
              slidesPerView: "auto",
              slideToClickedSlide: "true",
              grabCursor: !0,
            });
          n &&
            n.on("beforeTransitionStart", function () {
              for (
                var e = i(document.querySelectorAll(".s2  .swiper-slide")),
                  n = i(document.querySelectorAll(".s1  .slide")),
                  a = 0;
                a < n.length;
                ++a
              )
                n[a].classList.contains("_is-start") &&
                  n[a].classList.remove("_is-start"),
                  n[a].classList.contains("_is-active") &&
                    (n[a].classList.remove("_is-active"),
                    n[a].classList.add("_not-active"));
              setTimeout(function () {
                for (var i = 0; i < e.length; ++i)
                  e[i].classList.contains("swiper-slide-active") &&
                    ((t = e[i].getAttribute("data-id")),
                    n[t].classList.remove("_not-active"),
                    n[t].classList.add("_is-active"));
              }, 10);
            });
        };
      },
      "./src/assets/js/header.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Headers: function () {
              return i;
            },
          });
        var i = function () {
          window.addEventListener("scroll", function (e) {
            window.pageYOffset > 100
              ? document
                  .querySelector(".dop_header")
                  .classList.add("responciveHeader")
              : document
                  .querySelector(".dop_header")
                  .classList.remove("responciveHeader");
          }),
            (window.onresize = function () {
              window.innerWidth >= 999 &&
                (menu.querySelector(".header__info") &&
                  menu.querySelector(".header__info").remove(),
                menu.classList.remove("menu-active"),
                document.querySelector(".info").classList.remove("info-active"),
                document.querySelector("body").classList.remove("lock"));
            });
        };
      },
      "./src/assets/js/popup.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Popups: function () {
              return o;
            },
          });
        var i = n("./node_modules/plyr/dist/plyr.min.js"),
          a = n.n(i),
          r = n("./src/assets/js/constants.js");
        function s(e, t) {
          (null == t || t > e.length) && (t = e.length);
          for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
          return i;
        }
        var o = function () {
          var e,
            t = document.querySelector(".popup-js"),
            n = t.querySelectorAll(".popup__content"),
            i = [],
            o =
              (function (e) {
                if (Array.isArray(e)) return s(e);
              })((e = document.querySelectorAll(".slider-video"))) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              (function (e, t) {
                if (e) {
                  if ("string" == typeof e) return s(e, t);
                  var n = Object.prototype.toString.call(e).slice(8, -1);
                  return (
                    "Object" === n && e.constructor && (n = e.constructor.name),
                    "Map" === n || "Set" === n
                      ? Array.from(e)
                      : "Arguments" === n ||
                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                      ? s(e, t)
                      : void 0
                  );
                }
              })(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })();
          o.forEach(function (e) {
            var t = e.getAttribute("id");
            if (t) {
              var n = "#".concat(t),
                r = new (a())(n);
              i.push({ id: t, e: r });
            }
          }),
            document.addEventListener("click", function (e) {
              var a = e.target;
              a.closest(".popups-init-js")
                ? (function () {
                    var e = t.querySelector(
                      a.closest(".popups-init-js").getAttribute("rel")
                    );
                    setTimeout(function () {
                      (t.style.display = "block"),
                        t.classList.remove("_not-active"),
                        t.classList.add("_is-active"),
                        n.forEach(function (t) {
                          t == e
                            ? (e.style.display = "grid")
                            : (t.style.display = "none");
                        });
                    }, 200);
                    for (
                      var s = e.querySelector("video").getAttribute("id"),
                        l = 0;
                      l < o.length;
                      ++l
                    )
                      i[l].id === s && i[l].e.play();
                    r.body.style.cssText = "overflow: hidden";
                  })()
                : (a.matches(".popup-overlay-js") ||
                    a.closest(".popup-close-js")) &&
                  (function () {
                    t.classList.remove("_is-active"),
                      t.classList.add("_not-active"),
                      setTimeout(function () {
                        (t.style.display = "none"),
                          n.forEach(function (e) {
                            e.style.display = "none";
                          });
                      }, 300),
                      (r.body.style.cssText = "overflow: visible");
                    for (var e = 0; e < i.length; ++e) i[e].e.stop();
                  })();
            });
        };
      },
      "./src/assets/js/sdouble.js": function (e, t, n) {
        "use strict";
        n.r(t),
          n.d(t, {
            Double: function () {
              return i;
            },
          });
        var i = function () {
          document.addEventListener("DOMContentLoaded", function () {
            var e = new Swiper(".slider-double1-js", {
                loop: "true",
                speed: 500,
                slidesPerView: "auto",
                grabCursor: !0,
                spaceBetween: 20,
                thumbs: { swiper: t },
                  breakpoints: {
                        768: {
                          
                            spaceBetween: 0,
                  }
                              },
              }),
              t = new Swiper(".slider-double2-js", {
                slidesPerView: "auto",
                slideToClickedSlide: "true",
                spaceBetween: 10,
                loop: "true",
                speed: 500,
                navigation: {
                  nextEl: ".js-double2-next",
                  prevEl: ".js-double2-prev",
                },
                grabCursor: !0,
                watchSlidesProgress: !0,
                centeredSlides: !0,
              });
            (e.controller.control = t), (t.controller.control = e);
          });
        };
      },
      "./src/assets/scss/app.scss": function (e, t, n) {
        "use strict";
        n.r(t);
      },
    },
    t = {};
  function n(i) {
    var a = t[i];
    if (void 0 !== a) return a.exports;
    var r = (t[i] = { exports: {} });
    return e[i].call(r.exports, r, r.exports, n), r.exports;
  }
  (n.n = function (e) {
    var t =
      e && e.__esModule
        ? function () {
            return e.default;
          }
        : function () {
            return e;
          };
    return n.d(t, { a: t }), t;
  }),
    (n.d = function (e, t) {
      for (var i in t)
        n.o(t, i) &&
          !n.o(e, i) &&
          Object.defineProperty(e, i, { enumerable: !0, get: t[i] });
    }),
    (n.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (e) {
        if ("object" == typeof window) return window;
      }
    })()),
    (n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }),
    (n.r = function (e) {
      "undefined" != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(e, "__esModule", { value: !0 });
    });
  var i = {};
  !(function () {
    "use strict";
    n.r(i);
    var e = n("./src/assets/js/animation.js"),
      t = n("./src/assets/js/button.js"),
      a = n("./src/assets/js/header.js"),
      r = n("./src/assets/js/MySwiper.js"),
      s = n("./src/assets/js/popup.js"),
      o = n("./src/assets/js/galSwiper.js"),
      l = n("./src/assets/js/sdouble.js"),
      c = n("./src/assets/js/constants.js");
    n("./src/assets/scss/app.scss"),
      (0, e.Anim)(),
      (0, r.Swipers)(),
      (0, o.Gal)(),
      (0, l.Double)(),
      document.addEventListener("DOMContentLoaded", function () {
        c.popupsInit.length > 0 && (0, s.Popups)(),
          c.header && (0, a.Headers)(),
          c.waves.forEach(function (e) {
            e.addEventListener("click", t.Button);
          }),
          (function () {
            if (playerFullToys) {
              var e = document.querySelector(".playerFullToys"),
                t = document.querySelector(".toys__video .toys__sheap");
              (t.innerHTML = "0:00"),
                e.addEventListener("click", function (e) {
                  var n = playerFullToys.currentTime.toFixed(2);
                  (n = n.replace(".", ":")), (t.innerHTML = n);
                });
            }
          })();
      });
  })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
